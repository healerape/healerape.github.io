<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>项目演示</title>
      <link href="/2023/06/20/resume/"/>
      <url>/2023/06/20/resume/</url>
      
        <content type="html"><![CDATA[<h2 id="公司部分项目"><a href="#公司部分项目" class="headerlink" title="公司部分项目"></a>公司部分项目</h2><h3 id="门户系统-PC端"><a href="#门户系统-PC端" class="headerlink" title="门户系统 PC端"></a>门户系统 PC端</h3><ul><li><strong>功能介绍</strong>：政务办公网站</li><li><strong>适用平台</strong>：浏览器</li><li><strong>涉及</strong>：<code>ant-design-vue-pro</code> <code>vue3</code> <code>ts</code></li><li><strong>图片演示</strong>：<img src="/images/resume/hs.png" alt="图片演示"></li></ul><h3 id="招聘系统-PC端"><a href="#招聘系统-PC端" class="headerlink" title="招聘系统 PC端"></a>招聘系统 PC端</h3><ul><li><strong>功能介绍</strong>：登录 增删改查 表单 表格 文件上传下载 实时进度条 地图 拨号</li><li><strong>适用平台</strong>：浏览器</li><li><strong>涉及</strong>：<code>vue2</code> <code>element</code> <code>ruoyi</code> <code>websoket</code></li><li><strong>图片演示</strong>：<img src="/images/resume/zl.png" alt="图片演示"></li></ul><h3 id="大屏项目"><a href="#大屏项目" class="headerlink" title="大屏项目"></a>大屏项目</h3><ul><li><strong>功能介绍</strong>：多种 c3 动效，如呼吸灯、划线等；轮播，可点击可滑动；</li><li><strong>适用平台</strong>：终端触屏、浏览器</li><li><strong>涉及</strong>：<code>vue</code> <code>gulp</code> <code>swiper</code></li><li><strong>图片演示</strong>：<img src="/images/resume/swiper.png" alt="图片演示"></li></ul><h3 id="原生小程序项目"><a href="#原生小程序项目" class="headerlink" title="原生小程序项目"></a>原生小程序项目</h3><ul><li><strong>功能介绍</strong>：登录 新闻 视频 答题 个人中心几大模块</li><li><strong>适用平台</strong>：微信小程序</li><li><strong>涉及</strong>：<code>原生小程序</code></li><li><strong>图片演示</strong>：<img src="/images/resume/policeman.png" alt="图片演示"></li></ul><h3 id="uniapp-小程序项目"><a href="#uniapp-小程序项目" class="headerlink" title="uniapp 小程序项目"></a>uniapp 小程序项目</h3><ul><li><strong>功能介绍</strong>：登录 职位 赚钱 我的模块</li><li><strong>适用平台</strong>：微信小程序</li><li><strong>涉及</strong>：<code>原生小程序</code></li><li><strong>图片演示</strong>：<img src="/images/resume/uni.png" alt="图片演示"></li></ul><h3 id="体检小程序"><a href="#体检小程序" class="headerlink" title="体检小程序"></a>体检小程序</h3><ul><li><strong>功能介绍</strong>：预约 套餐售卖 等</li><li><strong>适用平台</strong>：微信小程序</li><li><strong>涉及</strong>：<code>原生小程序</code></li><li><strong>图片演示</strong>：<img src="/images/resume/tj.png" alt="图片演示"></li></ul><h2 id="个人项目"><a href="#个人项目" class="headerlink" title="个人项目"></a>个人项目</h2><h3 id="博客网站"><a href="#博客网站" class="headerlink" title="博客网站"></a>博客网站</h3><ul><li><strong>功能介绍</strong> 写博客</li><li><strong>适用平台</strong> <code>github</code></li><li><strong>涉及</strong>：<code>hexo</code> <code>模板引擎</code> <code>yml</code></li><li><strong>图片演示</strong>：<img src="/images/resume/halo.png" alt="图片演示"></li></ul><h3 id="工具类搭建"><a href="#工具类搭建" class="headerlink" title="工具类搭建"></a>工具类搭建</h3><ul><li><strong>功能介绍</strong>： element ui 二次开发；常用工具类开发；打包后可发布npm</li><li><strong>适用平台</strong>：通用</li><li><strong>涉及</strong>：<code>vue</code> <code>rollup</code> <code>jest</code></li><li><strong>图片演示</strong>：<img src="/images/resume/%E5%B7%A5%E5%85%B7.png" alt="图片演示"></li></ul><h3 id="油猴脚本-浏览器划句播放语音"><a href="#油猴脚本-浏览器划句播放语音" class="headerlink" title="油猴脚本 - 浏览器划句播放语音"></a>油猴脚本 - 浏览器划句播放语音</h3><ul><li><strong>功能介绍</strong>：划句选中后，生成语音播放按钮，可暂停，全网站通用，支持中英文；</li><li><strong>适用平台</strong>：<code>chrome</code> 浏览器</li><li><strong>涉及</strong>：<code>javascript</code></li><li><strong>图片演示</strong>：<img src="/images/resume/feature.png" alt="图片演示"></li></ul><h3 id="油猴脚本-b站视频快捷调节倍速"><a href="#油猴脚本-b站视频快捷调节倍速" class="headerlink" title="油猴脚本 - b站视频快捷调节倍速"></a>油猴脚本 - b站视频快捷调节倍速</h3><ul><li><strong>功能介绍</strong>：快捷键 a &#x2F; d 加减速（+-0.25）；快捷键c可输入自定义倍速（限制1-10）</li><li><strong>适用平台</strong>：<code>chrome</code> 浏览器</li><li><strong>涉及</strong>：<code>javascript</code></li><li><strong>图片演示</strong>：<img src="/images/resume/bilibili.png" alt="图片演示"></li></ul><h3 id="谷歌插件-多功能集成"><a href="#谷歌插件-多功能集成" class="headerlink" title="谷歌插件 - 多功能集成"></a>谷歌插件 - 多功能集成</h3><ul><li><strong>功能介绍</strong>： 倍速双语播放未完待续</li><li><strong>适用平台</strong>：<code>chrome</code> 浏览器</li><li><strong>涉及</strong>：<code>html</code> <code>css</code> <code>js</code></li><li><strong>图片演示</strong>：<img src="/images/resume/chrome.png" alt="图片演示"></li></ul><h2 id="项目经验"><a href="#项目经验" class="headerlink" title="项目经验"></a>项目经验</h2><blockquote><ol><li>大屏终端项目 &gt; 2</li></ol><ul><li>技术：<code>swiper</code> <code>vue</code> <code>canvas</code> <code>gulp</code></li><li>功能：<code>数据可视化</code> <code>签名</code> <code>滑动</code> <code>轮播</code></li></ul><ol start="2"><li>小程序 &gt; 5</li></ol><ul><li>技术： <code>原生</code> <code>wepy</code> <code>uniapp</code></li><li>功能： <code>体检</code> <code>单词学习</code> <code>政务</code> <code>视频</code> <code>新闻</code></li></ul><ol start="3"><li>PC &gt; 3</li></ol><ul><li>技术：<code>vue2全家桶</code> <code>vue3</code> <code>es6</code> <code>typescipt</code> <code>websoket</code> <code>vue-cli</code> <code>royi</code> <code>ant-design</code> <code>elementui</code></li><li>功能: <code>招聘网站</code> <code>门户系统</code> <code>后台管理系统</code></li></ul><ol start="4"><li>H5 &gt; 1</li></ol><ul><li><code>vue3</code> <code>typescript</code> <code>vant</code></li><li><code>办公</code></li></ul><ol start="5"><li>微信公众号 &gt; 1</li></ol><ul><li>技术：<code>微信api</code></li><li>功能: <code>选座</code> <code>定位</code> <code>打卡</code></li></ul><ol start="6"><li>工具类开发</li></ol><ul><li>技术：<code>vue3</code> <code>typescript</code> <code>rollup</code> <code>jest</code> <code>npm 打包发布</code></li><li>功能：<code>element-ui 组件二次开发</code> <code>从 0 到 1 的常用工具类，集成单元测试</code> <code>根据目录结构自动生成插件</code></li></ul><ol start="7"><li>脚本开发</li></ol><ul><li>技术：<code>javascript</code></li><li>功能：<code>适用于谷歌浏览器全网站的划线读音工具，支持中英文</code> <code>b站视频快捷调节倍速,加减速，自定义</code></li></ul><ol start="8"><li>谷歌插件开发</li></ol><ul><li>技术：<code>javascript</code></li><li>功能：<code>适用于谷歌浏览器全网站的划线读音工具，支持中英文</code> <code>b站视频快捷调节倍速,加减速，自定义</code></li></ul><ol start="8"><li>github 网站搭建</li></ol><ul><li>技术：<code>hexo</code> <code>模板引擎</code></li><li>功能：博客</li></ul><ol start="9"><li>其他</li></ol><ul><li>react node 有实际项目经验..</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 项目演示 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目演示 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 全知识</title>
      <link href="/2022/11/07/JavaScript/"/>
      <url>/2022/11/07/JavaScript/</url>
      
        <content type="html"><![CDATA[<h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><h4 id="1-基本引用类型"><a href="#1-基本引用类型" class="headerlink" title="1) 基本引用类型"></a>1) 基本引用类型</h4><h5 id="Date（日期）"><a href="#Date（日期）" class="headerlink" title="Date（日期）"></a>Date（日期）</h5><p><strong>概念：</strong> <code>Date</code> 是 JavaScript 中的一个内置对象，用于处理日期和时间的操作。</p><p><strong>语法：</strong> 创建 <code>Date</code> 对象的方式有多种，最常见的是通过 <code>new Date()</code> 构造函数来创建。</p><p><strong>使用场景：</strong> 在需要处理日期和时间的应用中，如日程安排、时间戳转换、倒计时等。</p><p><strong>举例子：</strong></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> currentDate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>currentDate<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出当前日期和时间</span><span class="token keyword">const</span> specificDate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">2023</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 年、月（0-11）、日</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>specificDate<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出指定日期</span></code></pre><h5 id="RegExp（正则表达式）"><a href="#RegExp（正则表达式）" class="headerlink" title="RegExp（正则表达式）"></a>RegExp（正则表达式）</h5><p><strong>概念：</strong> <code>RegExp</code> 是 JavaScript 中的一个对象，用于处理文本模式的匹配。</p><p><strong>语法：</strong> 正则表达式可以通过直接使用 <code>/pattern/</code> 来创建，或者使用 <code>RegExp</code> 构造函数。</p><p><strong>使用场景：</strong> 用于在文本中搜索、替换和匹配特定模式的字符串，如表单验证、文本解析等。</p><p><strong>举例子：</strong></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> pattern <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">hello</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gi</span></span><span class="token punctuation">;</span> <span class="token comment">// 全局、不区分大小写匹配 "hello"</span><span class="token keyword">const</span> text <span class="token operator">=</span> <span class="token string">"Hello world, hello universe!"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>text<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>pattern<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出匹配到的数组</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pattern<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 判断是否匹配</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>text<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> <span class="token string">"Hi"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 替换匹配项</span></code></pre><h5 id="原始值包装类型"><a href="#原始值包装类型" class="headerlink" title="原始值包装类型"></a>原始值包装类型</h5><p><strong>概念：</strong> JavaScript 的原始值（布尔、数字、字符串）可以自动包装成对应的对象，以便在对象上调用方法。</p><p><strong>语法：</strong> 使用 <code>new</code> 关键字来创建原始值的包装对象。</p><p><strong>使用场景：</strong> 在需要在原始值上调用方法时，如处理字符串、数字等操作。</p><p><strong>举例子：</strong></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">const</span> wrappedBoolean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Boolean</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 包装成 Boolean 对象</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>wrappedBoolean<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 解包为原始值</span><span class="token keyword">const</span> numberValue <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span><span class="token keyword">const</span> wrappedNumber <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span>numberValue<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 包装成 Number 对象</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>wrappedNumber<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 解包为原始值</span><span class="token keyword">const</span> stringValue <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token punctuation">;</span><span class="token keyword">const</span> wrappedString <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>stringValue<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 包装成 String 对象</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>wrappedString<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 解包为原始值</span></code></pre><h5 id="单例内置对象"><a href="#单例内置对象" class="headerlink" title="单例内置对象"></a>单例内置对象</h5><p><strong>概念：</strong> 单例内置对象是在 JavaScript 中只有一个实例的对象。</p><p><strong>使用场景：</strong> 全局范围内的共享功能，如全局方法、数学运算等。</p><p><strong>举例子：</strong></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 计算平方根</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token constant">PI</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 圆周率常量</span><span class="token comment">// 在浏览器中，全局对象是 window</span><span class="token comment">// 在 Node.js 中，全局对象是 global</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>innerWidth<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取浏览器窗口宽度</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>global<span class="token punctuation">.</span>process<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Node.js 全局对象的进程信息</span></code></pre><h4 id="2-集合引用类型"><a href="#2-集合引用类型" class="headerlink" title="2) 集合引用类型"></a>2) 集合引用类型</h4><h5 id="6-1-Object"><a href="#6-1-Object" class="headerlink" title="6.1 Object"></a>6.1 Object</h5><p><strong>概念：</strong> <code>Object</code> 是 JavaScript 中最基本的数据类型，用于存储键值对。它是一种无序的集合，键是字符串或符号，值可以是任何数据类型。</p><h5 id="6-2-Array"><a href="#6-2-Array" class="headerlink" title="6.2 Array"></a>6.2 Array</h5><p><strong>概念：</strong> <code>Array</code> 是一种有序、可变的集合类型，用于存储一系列值。数组中的每个值都有一个索引，索引从 0 开始递增。</p><h6 id="6-2-1-创建数组"><a href="#6-2-1-创建数组" class="headerlink" title="6.2.1 创建数组"></a>6.2.1 创建数组</h6><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> colors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token string">"red"</span><span class="token punctuation">,</span> <span class="token string">"green"</span><span class="token punctuation">,</span> <span class="token string">"blue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h6 id="6-2-2-数组空位"><a href="#6-2-2-数组空位" class="headerlink" title="6.2.2 数组空位"></a>6.2.2 数组空位</h6><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> sparseArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 空位在索引 1 处</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sparseArray<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 3</span></code></pre><h6 id="6-2-3-数组索引"><a href="#6-2-3-数组索引" class="headerlink" title="6.2.3 数组索引"></a>6.2.3 数组索引</h6><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> fruits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token string">"banana"</span><span class="token punctuation">,</span> <span class="token string">"orange"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fruits<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 "apple"</span></code></pre><h6 id="6-2-4-检测数组"><a href="#6-2-4-检测数组" class="headerlink" title="6.2.4 检测数组"></a>6.2.4 检测数组</h6><pre class="language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 true</span></code></pre><h6 id="6-2-5-迭代器方法"><a href="#6-2-5-迭代器方法" class="headerlink" title="6.2.5 迭代器方法"></a>6.2.5 迭代器方法</h6><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>numbers<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">num</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 遍历数组</span></code></pre><h6 id="6-2-6-复制和填充方法"><a href="#6-2-6-复制和填充方法" class="headerlink" title="6.2.6 复制和填充方法"></a>6.2.6 复制和填充方法</h6><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> originalArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> filledArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 填充数组</span></code></pre><h6 id="6-2-7-转换方法"><a href="#6-2-7-转换方法" class="headerlink" title="6.2.7 转换方法"></a>6.2.7 转换方法</h6><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> numberString <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">", "</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 转换为字符串</span></code></pre><h6 id="6-2-8-栈方法"><a href="#6-2-8-栈方法" class="headerlink" title="6.2.8 栈方法"></a>6.2.8 栈方法</h6><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"first"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 入栈</span>stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"second"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> poppedItem <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 出栈</span></code></pre><h6 id="6-2-9-队列方法"><a href="#6-2-9-队列方法" class="headerlink" title="6.2.9 队列方法"></a>6.2.9 队列方法</h6><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> queue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"first"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 入队</span>queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"second"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> dequeuedItem <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 出队</span></code></pre><h6 id="6-2-10-排序方法"><a href="#6-2-10-排序方法" class="headerlink" title="6.2.10 排序方法"></a>6.2.10 排序方法</h6><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>numbers<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> a <span class="token operator">-</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 升序排序</span></code></pre><h6 id="6-2-11-操作方法"><a href="#6-2-11-操作方法" class="headerlink" title="6.2.11 操作方法"></a>6.2.11 操作方法</h6><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>numbers<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 添加元素到数组末尾</span>numbers<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 移除数组末尾元素</span></code></pre><h6 id="6-2-12-搜索和位置方法"><a href="#6-2-12-搜索和位置方法" class="headerlink" title="6.2.12 搜索和位置方法"></a>6.2.12 搜索和位置方法</h6><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> index <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 查找元素索引</span></code></pre><h6 id="6-2-13-迭代方法"><a href="#6-2-13-迭代方法" class="headerlink" title="6.2.13 迭代方法"></a>6.2.13 迭代方法</h6><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> doubledNumbers <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">num</span> <span class="token operator">=></span> num <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 数组映射</span></code></pre><h6 id="6-2-14-归并方法"><a href="#6-2-14-归并方法" class="headerlink" title="6.2.14 归并方法"></a>6.2.14 归并方法</h6><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> sum <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">acc<span class="token punctuation">,</span> num</span><span class="token punctuation">)</span> <span class="token operator">=></span> acc <span class="token operator">+</span> num<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 数组归并求和</span></code></pre><h5 id="6-3-定型数组"><a href="#6-3-定型数组" class="headerlink" title="6.3 定型数组"></a>6.3 定型数组</h5><p><strong>概念：</strong> 定型数组是一种用于存储特定数据类型的连续内存块，提供了更高效的数据操作。</p><h6 id="6-3-1-历史"><a href="#6-3-1-历史" class="headerlink" title="6.3.1 历史"></a>6.3.1 历史</h6><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBuffer</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建 8 字节的内存块</span><span class="token keyword">const</span> view <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Int32Array</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将内存块视为 4 个整数</span></code></pre><h6 id="6-3-2-ArrayBuffer"><a href="#6-3-2-ArrayBuffer" class="headerlink" title="6.3.2 ArrayBuffer"></a>6.3.2 ArrayBuffer</h6><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBuffer</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建 8 字节的内存块</span><span class="token keyword">const</span> view <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataView</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 使用 DataView 访问内存块</span></code></pre><h6 id="6-3-3-DataView"><a href="#6-3-3-DataView" class="headerlink" title="6.3.3 DataView"></a>6.3.3 DataView</h6><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBuffer</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> view <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataView</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>view<span class="token punctuation">.</span><span class="token function">setInt16</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 设置索引 0 处的 16 位整数为 42</span></code></pre><h6 id="6-3-4-定型数组"><a href="#6-3-4-定型数组" class="headerlink" title="6.3.4 定型数组"></a>6.3.4 定型数组</h6><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> intArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Int32Array</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4 个 32 位整数</span><span class="token keyword">const</span> floatArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Float64Array</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3 个 64 位浮点数</span></code></pre><h5 id="6-4-Map"><a href="#6-4-Map" class="headerlink" title="6.4 Map"></a>6.4 Map</h5><p><strong>概念：</strong> <code>Map</code> 是一种用于存储键值对的集合，键可以是任何数据类型。与对象不同，<code>Map</code> 保留插入顺序。</p><h6 id="6-4-1-基本-API"><a href="#6-4-1-基本-API" class="headerlink" title="6.4.1 基本 API"></a>6.4.1 基本 API</h6><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"Alice"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 设置键值对</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取值</span></code></pre><h6 id="6-4-2-顺序与迭代"><a href="#6-4-2-顺序与迭代" class="headerlink" title="6.4.2 顺序与迭代"></a>6.4.2 顺序与迭代</h6><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span> value<span class="token punctuation">]</span> <span class="token keyword">of</span> map<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h6 id="6-4-3-选择-Object-还是-Map"><a href="#6-4-3-选择-Object-还是-Map" class="headerlink" title="6.4.3 选择 Object 还是 Map"></a>6.4.3 选择 Object 还是 Map</h6><ul><li>如果需要键为非字符串类型、保留插入顺序、需要快速增加和删除键值对，应使用 <code>Map</code>。</li><li>如果需要简单的键值对集合，并希望使用点表示法访问属性，可以使用对象。</li></ul><h5 id="6-5-WeakMap"><a href="#6-5-WeakMap" class="headerlink" title="6.5 WeakMap"></a>6.5 WeakMap</h5><p><strong>概念：</strong> <code>WeakMap</code> 是一种特殊的 <code>Map</code>，只能包含对象作为键，且键是弱引用。</p><h6 id="6-5-1-基本-API"><a href="#6-5-1-基本-API" class="headerlink" title="6.5.1 基本 API"></a>6.5.1 基本 API</h6><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> weakMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> key <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// 对象作为键</span>weakMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>weakMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h6 id="6"><a href="#6" class="headerlink" title="6"></a>6</h6><p>.5.2 弱键</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 当 key 不再被引用时，weakMap 会自动清除键值对</span><span class="token keyword">const</span> weakMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> key <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  weakMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// key 被销毁后，weakMap 会自动删除对应键值对</span></code></pre><h6 id="6-5-3-不可迭代键"><a href="#6-5-3-不可迭代键" class="headerlink" title="6.5.3 不可迭代键"></a>6.5.3 不可迭代键</h6><p><code>WeakMap</code> 键不能被迭代，因此不能使用 <code>for...of</code> 或 <code>forEach</code> 遍历。</p><h6 id="6-5-4-使用弱映射"><a href="#6-5-4-使用弱映射" class="headerlink" title="6.5.4 使用弱映射"></a>6.5.4 使用弱映射</h6><p><code>WeakMap</code> 适用于需要与对象关联的私有数据，同时不会导致对象被保留在内存中。</p><h5 id="6-6-Set"><a href="#6-6-Set" class="headerlink" title="6.6 Set"></a>6.6 Set</h5><p><strong>概念：</strong> <code>Set</code> 是一种存储不重复值的集合，类似于数组，但没有重复项。</p><h6 id="6-6-1-基本-API"><a href="#6-6-1-基本-API" class="headerlink" title="6.6.1 基本 API"></a>6.6.1 基本 API</h6><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 添加元素</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>set<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 检查元素是否存在</span></code></pre><h6 id="6-6-2-顺序与迭代"><a href="#6-6-2-顺序与迭代" class="headerlink" title="6.6.2 顺序与迭代"></a>6.6.2 顺序与迭代</h6><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> value <span class="token keyword">of</span> set<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h6 id="6-6-3-定义正式集合操作"><a href="#6-6-3-定义正式集合操作" class="headerlink" title="6.6.3 定义正式集合操作"></a>6.6.3 定义正式集合操作</h6><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> setA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> setB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> union <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>setA<span class="token punctuation">,</span> <span class="token operator">...</span>setB<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 并集</span></code></pre><h5 id="6-7-WeakSet"><a href="#6-7-WeakSet" class="headerlink" title="6.7 WeakSet"></a>6.7 WeakSet</h5><p><strong>概念：</strong> <code>WeakSet</code> 类似于 <code>WeakMap</code>，是一种特殊的 <code>Set</code>，只能包含对象作为值，且值是弱引用。</p><h6 id="6-7-1-基本-API"><a href="#6-7-1-基本-API" class="headerlink" title="6.7.1 基本 API"></a>6.7.1 基本 API</h6><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> weakSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>weakSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>weakSet<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h6 id="6-7-2-弱值"><a href="#6-7-2-弱值" class="headerlink" title="6.7.2 弱值"></a>6.7.2 弱值</h6><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 当 obj 不再被引用时，weakSet 会自动清除对应值</span><span class="token keyword">const</span> weakSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  weakSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// obj 被销毁后，weakSet 会自动删除对应值</span></code></pre><h6 id="6-7-3-不可迭代值"><a href="#6-7-3-不可迭代值" class="headerlink" title="6.7.3 不可迭代值"></a>6.7.3 不可迭代值</h6><p><code>WeakSet</code> 值不能被迭代，因此不能使用 <code>for...of</code> 或 <code>forEach</code> 遍历。</p><h6 id="6-7-4-使用弱集合"><a href="#6-7-4-使用弱集合" class="headerlink" title="6.7.4 使用弱集合"></a>6.7.4 使用弱集合</h6><p><code>WeakSet</code> 适用于需要跟踪对象存在与否的情况，同时不会导致对象被保留在内存中。</p><h5 id="6-8-迭代与扩展操作"><a href="#6-8-迭代与扩展操作" class="headerlink" title="6.8 迭代与扩展操作"></a>6.8 迭代与扩展操作</h5><p>在 ES6 及以后的版本中，数组和其他可迭代对象支持更多的迭代和扩展操作，如 <code>for...of</code> 循环、展开操作符 <code>...</code> 等。</p><h4 id="3-代理与反射"><a href="#3-代理与反射" class="headerlink" title="3) 代理与反射"></a>3) 代理与反射</h4><h5 id="1-代理基础"><a href="#1-代理基础" class="headerlink" title="1. 代理基础"></a>1. 代理基础</h5><p><strong>创建空代理：</strong> 使用 <code>new Proxy(target, handler)</code> 创建一个代理对象，其中 <code>target</code> 是要代理的对象，<code>handler</code> 是捕获器对象，用于定义代理行为。</p><p><strong>定义捕获器：</strong> 捕获器是一组方法，用于拦截目标对象的各种操作。常见的捕获器包括 <code>get</code>、<code>set</code>、<code>has</code>、<code>deleteProperty</code> 等。</p><ul><li><p><strong>捕获器参数和反射 API：</strong> 捕获器方法接收参数，其中包括目标对象、属性名等操作相关信息。反射 API 如 <code>Reflect.get()</code> 可用于调用原始操作。</p></li><li><p><strong>捕获器不变式：</strong> 捕获器应遵循特定操作的预期行为。例如，在 <code>set</code> 捕获器中应确保更新属性值等。</p></li></ul><p><strong>可撤销代理：</strong> 使用 <code>Proxy.revocable(target, handler)</code> 创建一个代理，可通过返回的可撤销对象取消代理。</p><p><strong>实用反射 API：</strong> 反射 API 提供了诸如 <code>Reflect.getOwnPropertyDescriptor()</code>、<code>Reflect.setPrototypeOf()</code> 等实用方法。</p><p><strong>代理另一个代理：</strong> 可以创建代理来代理另一个代理对象，形成代理链。</p><p><strong>代理的问题与不足：</strong> 代理模式的缺点包括性能开销和无法代理某些操作，如无法代理 <code>Object.preventExtensions()</code>。</p><h5 id="2-代理捕获器与反射方法"><a href="#2-代理捕获器与反射方法" class="headerlink" title="2. 代理捕获器与反射方法"></a>2. 代理捕获器与反射方法</h5><p><strong>get() 捕获器：</strong> 控制属性的读取操作，返回属性值或进行附加操作。</p><p><strong>set() 捕获器：</strong> 控制属性的写入操作，执行合法性验证或其他额外处理。</p><p><strong>has() 捕获器：</strong> 控制 <code>in</code> 操作符的行为，检查属性是否存在。</p><p><strong>defineProperty() 捕获器：</strong> 控制 <code>Object.defineProperty()</code> 的行为，用于定义属性特性。</p><p><strong>getOwnPropertyDescriptor() 捕获器：</strong> 控制 <code>Object.getOwnPropertyDescriptor()</code> 的行为，返回属性的描述符。</p><p><strong>deleteProperty() 捕获器：</strong> 控制 <code>delete</code> 操作符的行为，控制属性的删除。</p><p><strong>ownKeys() 捕获器：</strong> 控制属性键的枚举操作，如 <code>Object.keys()</code>。</p><p><strong>getPrototypeOf() 捕获器：</strong> 控制 <code>Object.getPrototypeOf()</code> 的行为，返回对象的原型。</p><p><strong>setPrototypeOf() 捕获器：</strong> 控制 <code>Object.setPrototypeOf()</code> 的行为，设置对象的原型。</p><p><strong>isExtensible() 捕获器：</strong> 控制 <code>Object.isExtensible()</code> 的行为，检查对象是否可扩展。</p><p><strong>preventExtensions() 捕获器：</strong> 控制 <code>Object.preventExtensions()</code> 的行为，阻止对象扩展。</p><p><strong>apply() 捕获器：</strong> 控制函数调用的行为，用于函数的拦截和修改。</p><p><strong>construct() 捕获器：</strong> 控制构造函数调用的行为，拦截类的实例化。</p><h5 id="3-代理模式"><a href="#3-代理模式" class="headerlink" title="3. 代理模式"></a>3. 代理模式</h5><p><strong>跟踪属性访问：</strong> 使用代理记录属性的访问，实现日志记录、性能分析等。</p><p><strong>隐藏属性：</strong> 代理用于隐藏对象中的某些属性，提供更好的封装和抽象。</p><p><strong>属性验证：</strong> 使用捕获器验证属性的设置，确保符合业务逻辑。</p><p><strong>函数与构造函数参数验证：</strong> 使用代理对函数参数进行验证，确保传入的参数有效。</p><p><strong>数据绑定与可观察对象：</strong> 代理可用于实现数据绑定，当属性变化时触发相应操作，实现可观察对象。</p><h3 id="script标签"><a href="#script标签" class="headerlink" title="script标签"></a>script标签</h3><h4 id="默认的-lt-script-gt-标签加载行为"><a href="#默认的-lt-script-gt-标签加载行为" class="headerlink" title="默认的 &lt;script&gt; 标签加载行为"></a>默认的 <code>&lt;script&gt;</code> 标签加载行为</h4><h5 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h5><p>默认情况下，没有使用<code>defer</code>或<code>async</code>属性的<code>&lt;script&gt;</code>标签会按照它们在文档中的出现顺序同步加载和执行。</p><h5 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h5><ul><li>同步加载：默认的加载行为会阻塞页面的解析和渲染，直到脚本加载和执行完成。</li></ul><h5 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h5><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Default Script Behavior<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>script1.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>script2.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>This is a paragraph.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h4 id="推迟执行脚本（defer）"><a href="#推迟执行脚本（defer）" class="headerlink" title="推迟执行脚本（defer）"></a>推迟执行脚本（defer）</h4><h5 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h5><ul><li><code>defer</code>属性告诉浏览器推迟脚本的执行，直到整个HTML文档被解析完毕。</li><li>脚本的执行会在<code>DOMContentLoaded</code>事件之前完成，保证了脚本不会阻塞文档的解析和渲染。</li></ul><h5 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h5><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>your-script.js<span class="token punctuation">"</span></span> <span class="token attr-name">defer</span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h5 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h5><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Defer Example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>script.js<span class="token punctuation">"</span></span> <span class="token attr-name">defer</span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>This is a paragraph.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h4 id="异步执行脚本（async）"><a href="#异步执行脚本（async）" class="headerlink" title="异步执行脚本（async）"></a>异步执行脚本（async）</h4><h5 id="概念-2"><a href="#概念-2" class="headerlink" title="概念"></a>概念</h5><ul><li><code>async</code>属性告诉浏览器立即下载脚本，但在下载过程中不会阻塞文档的解析。</li><li>脚本会在下载完毕后立即执行，可能会在文档的解析之前或之后执行，取决于脚本的加载速度。</li></ul><h5 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h5><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>your-script.js<span class="token punctuation">"</span></span> <span class="token attr-name">async</span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h5 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h5><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Async Example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>script.js<span class="token punctuation">"</span></span> <span class="token attr-name">async</span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>This is a paragraph.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h4 id="动态加载脚本（动态创建-lt-script-gt-元素）"><a href="#动态加载脚本（动态创建-lt-script-gt-元素）" class="headerlink" title="动态加载脚本（动态创建&lt;script&gt;元素）"></a>动态加载脚本（动态创建<code>&lt;script&gt;</code>元素）</h4><h5 id="概念-3"><a href="#概念-3" class="headerlink" title="概念"></a>概念</h5><ul><li>动态加载脚本是指在页面加载过程中使用JavaScript创建<code>&lt;script&gt;</code>元素，然后将其插入到文档中，从而异步加载脚本。</li></ul><h5 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h5><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> script <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'script'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>script<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">'your-script.js'</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span>head<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="示例-3"><a href="#示例-3" class="headerlink" title="示例"></a>示例</h5><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> button <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'loadScriptButton'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>button<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> script <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'script'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  script<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">'script.js'</span><span class="token punctuation">;</span>  document<span class="token punctuation">.</span>head<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="JavaScript-API"><a href="#JavaScript-API" class="headerlink" title="JavaScript API"></a>JavaScript API</h3><h4 id="1-原生拖拽"><a href="#1-原生拖拽" class="headerlink" title="1) 原生拖拽"></a>1) 原生拖拽</h4><h5 id="1-概念介绍"><a href="#1-概念介绍" class="headerlink" title="1. 概念介绍"></a>1. 概念介绍</h5><p>拖拽（Drag and Drop）是指在前端网页中，用户可以点击并拖动某个元素，然后将其放置到指定区域。原生拖拽指的是使用浏览器提供的原生拖拽事件和API来实现此功能。</p><h5 id="2-原生拖拽的基本步骤"><a href="#2-原生拖拽的基本步骤" class="headerlink" title="2. 原生拖拽的基本步骤"></a>2. 原生拖拽的基本步骤</h5><ol><li>将要拖拽的元素设置为可拖动，通过设置 <code>draggable=&quot;true&quot;</code> 属性。</li><li>监听拖拽相关的事件，包括 <code>dragstart</code>、<code>dragenter</code>、<code>dragleave</code>、<code>dragover</code> 和 <code>drop</code>。</li><li>在事件处理函数中，进行必要的操作，如阻止默认行为、改变样式、更新数据等。</li></ol><h5 id="3-原生拖拽事件和API"><a href="#3-原生拖拽事件和API" class="headerlink" title="3. 原生拖拽事件和API"></a>3. 原生拖拽事件和API</h5><p>原生拖拽涉及的主要事件和API包括：</p><ul><li><code>dragstart</code>：在开始拖拽操作时触发，用于设置传输的数据（<code>dataTransfer.setData</code>）和拖拽效果（<code>event.dataTransfer.effectAllowed</code>）。</li><li><code>dragenter</code>：在拖动元素进入放置目标时触发，用于改变放置目标的样式。</li><li><code>dragover</code>：在拖动元素在放置目标上移动时触发，阻止默认放置行为。</li><li><code>dragleave</code>：在拖动元素离开放置目标时触发，用于清除放置目标的样式。</li><li><code>drop</code>：在拖动元素放置到放置目标上时触发，用于处理放置操作，阻止默认放置行为，更新DOM结构。</li></ul><h5 id="4-拖拽示例"><a href="#4-拖拽示例" class="headerlink" title="4. 拖拽示例"></a>4. 拖拽示例</h5><p>以下是一个简单的原生拖拽示例：</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Drag and Drop Example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">  <span class="token selector">.drag-box</span> <span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> lightblue<span class="token punctuation">;</span>    <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token property">line-height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token property">cursor</span><span class="token punctuation">:</span> grab<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">.drop-zone</span> <span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>    <span class="token property">border</span><span class="token punctuation">:</span> 2px dashed gray<span class="token punctuation">;</span>    <span class="token property">margin-top</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>    <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token property">line-height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>drag-box<span class="token punctuation">"</span></span> <span class="token attr-name">draggable</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Drag Me<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>drop-zone<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Drop Here<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">const</span> dragBox <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.drag-box'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> dropZone <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.drop-zone'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 阻止默认放置行为</span>    dropZone<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'dragover'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 当拖动元素进入放置目标时，改变放置目标的样式</span>    dropZone<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'dragenter'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      dropZone<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token string">'lightgreen'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 当拖动元素离开放置目标时，清除放置目标的样式</span>    dropZone<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'dragleave'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      dropZone<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 在放置目标上放置元素时触发</span>    dropZone<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'drop'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      dropZone<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>      <span class="token comment">// 获取拖动的元素</span>      <span class="token keyword">const</span> draggedElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.drag-box'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 将拖动的元素添加到放置目标中</span>      dropZone<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>draggedElement<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>在这个示例中，我们创建了一个可以拖动的方块（<code>.drag-box</code>）和一个放置目标（<code>.drop-zone</code>）。我们使用了拖拽事件来实现拖拽交互：</p><ul><li></li></ul><p> <code>dragover</code>：阻止默认放置行为，允许元素在放置目标上移动。</p><ul><li><code>dragenter</code>：在拖动元素进入放置目标时，改变放置目标的样式。</li><li><code>dragleave</code>：在拖动元素离开放置目标时，清除放置目标的样式。</li><li><code>drop</code>：在拖动元素放置到放置目标上时，阻止默认行为，将拖动的元素添加到放置目标中。</li></ul><p>通过这个示例，你可以尝试运行代码并与界面进行交互，以更好地理解原生拖放事件的使用。</p><h4 id="2-Encoding-API"><a href="#2-Encoding-API" class="headerlink" title="2) Encoding API"></a>2) Encoding API</h4><h5 id="1-TextDecoder-接口"><a href="#1-TextDecoder-接口" class="headerlink" title="1. TextDecoder 接口"></a>1. TextDecoder 接口</h5><p><strong>作用：</strong> 将字节数据转换为文本字符串。</p><p><strong>用法：</strong> 创建一个 TextDecoder 实例，然后使用 <code>.decode()</code> 方法将字节数据解码为字符串。</p><p><strong>示例：</strong></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> decoder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TextDecoder</span><span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> byteData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Uint8Array</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">72</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">,</span> <span class="token number">108</span><span class="token punctuation">,</span> <span class="token number">108</span><span class="token punctuation">,</span> <span class="token number">111</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> text <span class="token operator">=</span> decoder<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>byteData<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 输出：Hello</span></code></pre><h5 id="2-TextEncoder-接口"><a href="#2-TextEncoder-接口" class="headerlink" title="2. TextEncoder 接口"></a>2. TextEncoder 接口</h5><p><strong>作用：</strong> 将文本字符串转换为字节数据。</p><p><strong>用法：</strong> 创建一个 TextEncoder 实例，然后使用 <code>.encode()</code> 方法将文本编码为字节数据。</p><p><strong>示例：</strong></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> encoder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TextEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> text <span class="token operator">=</span> <span class="token string">'Hello'</span><span class="token punctuation">;</span><span class="token keyword">const</span> byteData <span class="token operator">=</span> encoder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>byteData<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 输出：Uint8Array(5) [72, 101, 108, 108, 111]</span></code></pre><h5 id="3-TextDecoderStream-接口"><a href="#3-TextDecoderStream-接口" class="headerlink" title="3. TextDecoderStream 接口"></a>3. TextDecoderStream 接口</h5><p><strong>作用：</strong> 在数据流中进行字节到文本的解码。</p><p><strong>用法：</strong> 创建一个 TextDecoderStream 实例，将它的 <code>.readable</code> 属性与其他可读数据流连接，以在流传输过程中进行解码。</p><p><strong>示例：</strong></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> decoderStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TextDecoderStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> readableStream <span class="token operator">=</span> readableByteStream<span class="token punctuation">.</span><span class="token function">pipeTo</span><span class="token punctuation">(</span>decoderStream<span class="token punctuation">.</span>writable<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="4-TextEncoderStream-接口"><a href="#4-TextEncoderStream-接口" class="headerlink" title="4. TextEncoderStream 接口"></a>4. TextEncoderStream 接口</h5><p><strong>作用：</strong> 在数据流中进行文本到字节的编码。</p><p><strong>用法：</strong> 创建一个 TextEncoderStream 实例，将它的 <code>.readable</code> 属性与其他可读数据流连接，以在流传输过程中进行编码。</p><p><strong>示例：</strong></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> encoderStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TextEncoderStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> writableStream <span class="token operator">=</span> encoderStream<span class="token punctuation">.</span>readable<span class="token punctuation">.</span><span class="token function">pipeTo</span><span class="token punctuation">(</span>writableByteStream<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>以上这些接口在处理文本数据的编码和解码，以及在流处理中都有非常重要的作用。无论你是要将二进制数据转换为可读的文本，还是将文本转换为适合存储或传输的二进制数据，Encoding API 提供的这些接口都能够帮助你高效地完成这些操作。</p><h4 id="3-File-API-和-Blob-API"><a href="#3-File-API-和-Blob-API" class="headerlink" title="3) File API 和 Blob API"></a>3) File API 和 Blob API</h4><h5 id="File-类型"><a href="#File-类型" class="headerlink" title="File 类型"></a>File 类型</h5><p><code>File</code> 类型表示从用户输入框中选择的文件。它继承自 <code>Blob</code> 类型，具有一些额外的属性，用于描述文件的相关信息。</p><p><strong>语法：</strong></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token punctuation">[</span>fileBits<span class="token punctuation">]</span><span class="token punctuation">,</span> fileName<span class="token punctuation">[</span><span class="token punctuation">,</span> options<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>示例：</strong></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 创建一个File对象</span><span class="token keyword">const</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'Hello, world!'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'example.txt'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'text/plain'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 输出: example.txt</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 输出: 13</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 输出: text/plain</span></code></pre><h5 id="FileReader-类型"><a href="#FileReader-类型" class="headerlink" title="FileReader 类型"></a>FileReader 类型</h5><p><code>FileReader</code> 类型用于读取文件内容。它提供异步读取文件的方法，以及相应的事件处理程序来处理读取的数据。</p><p><strong>语法：</strong></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>reader<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 处理读取的数据，event.target.result 包含读取的内容</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>reader<span class="token punctuation">.</span><span class="token function">readAsText</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 以文本形式读取文件内容</span></code></pre><p><strong>示例：</strong></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'Hello, FileReader!'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'example.txt'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'text/plain'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>reader<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 输出: Hello, FileReader!</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>reader<span class="token punctuation">.</span><span class="token function">readAsText</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="FileReaderSync-类型"><a href="#FileReaderSync-类型" class="headerlink" title="FileReaderSync 类型"></a>FileReaderSync 类型</h5><p><code>FileReaderSync</code> 类型是 <code>FileReader</code> 的同步版本，它以同步方式读取文件内容。注意，同步操作可能会阻塞主线程。</p><p><strong>语法：</strong></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReaderSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> result <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">readAsText</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>示例：</strong></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'Hello, FileReaderSync!'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'example.txt'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'text/plain'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReaderSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> result <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">readAsText</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 输出: Hello, FileReaderSync!</span></code></pre><h5 id="Blob-与部分读取"><a href="#Blob-与部分读取" class="headerlink" title="Blob 与部分读取"></a>Blob 与部分读取</h5><p><code>Blob</code> 类型用于表示二进制大型对象，可以进行文件读写操作。可以通过 <code>slice()</code> 方法将 <code>Blob</code> 分割成更小的块。</p><p><strong>语法：</strong></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> newBlob <span class="token operator">=</span> oldBlob<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">,</span> contentType<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>示例：</strong></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> blob <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'Hello, Blob!'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'text/plain'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> newBlob <span class="token operator">=</span> blob<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'text/plain'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="对象-URL-与-Blob"><a href="#对象-URL-与-Blob" class="headerlink" title="对象 URL 与 Blob"></a>对象 URL 与 Blob</h5><p><code>URL.createObjectURL()</code> 方法用于创建指向 <code>Blob</code> 或 <code>File</code> 对象的 URL，用于显示图片、音视频内容或下载文件。</p><p><strong>语法：</strong></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> objectURL <span class="token operator">=</span> <span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span>blob<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>示例：</strong></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> blob <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'Hello, object URL!'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'text/plain'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> objectURL <span class="token operator">=</span> <span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span>blob<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 在图片元素中显示图片</span><span class="token keyword">const</span> img <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'img'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>img<span class="token punctuation">.</span>src <span class="token operator">=</span> objectURL<span class="token punctuation">;</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="读取拖放文件"><a href="#读取拖放文件" class="headerlink" title="读取拖放文件"></a>读取拖放文件</h5><p>通过拖放功能，用户可以将文件拖放到网页中。通过事件处理程序和 <code>FileReader</code> 可以读取拖放的文件内容。</p><p><strong>语法：</strong></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">element<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'drop'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> file <span class="token operator">=</span> event<span class="token punctuation">.</span>dataTransfer<span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    reader<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 处理读取的数据</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    reader<span class="token punctuation">.</span><span class="token function">readAsText</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>示例：</strong></p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>拖放文件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dropZone<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span> <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span> <span class="token property">border</span><span class="token punctuation">:</span> 2px dashed black<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>拖放文件到这里<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">        <span class="token keyword">const</span> dropZone <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'dropZone'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dropZone<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'dragover'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dropZone<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'drop'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">const</span> file <span class="token operator">=</span> event<span class="token punctuation">.</span>dataTransfer<span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                        <span class="token keyword">const</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            reader<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            reader<span class="token punctuation">.</span><span class="token function">readAsText</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>这些示例和语法展示了File API和Blob API的用法，以及它们在文件操作和读取方面的应用。同时也展示了如何使用这些接口与用户交互，以实现拖放和显示文件内容等功能。</p><h5 id="区别和重点"><a href="#区别和重点" class="headerlink" title="区别和重点"></a>区别和重点</h5><ol><li><p><strong>File API</strong>：</p><ul><li>File API 主要关注于让 Web 应用程序能够与用户计算机上的文件进行交互。</li><li>它允许用户通过 <code>&lt;input type=&quot;file&quot;&gt;</code> 元素选择文件，并将选中的文件表示为 File 对象。</li><li>每个 File 对象包含有关文件的信息，如文件名、大小、MIME 类型等。</li><li>File API 还提供了 FileReader 类型，用于异步读取文件内容。</li><li>File API 的核心目标是使 Web 应用程序能够处理用户选择的本地文件。</li></ul></li><li><p><strong>Blob API</strong>：</p><ul><li>Blob API 关注于创建、操作和处理二进制数据块（Blob 对象）。</li><li>Blob 是一种表示二进制大对象的封装，它可以包含任何类型的二进制数据，如图像、音频、视频等。</li><li>Blob API 允许您创建 Blob 对象，以及在需要时分割 Blob 对象以处理部分数据。</li><li>它还提供了创建对象 URL 的方式，以避免将数据读取到 JavaScript 中。</li></ul></li></ol><h5 id="转化"><a href="#转化" class="headerlink" title="转化"></a>转化</h5><p>在某些情况下，您可能需要在 File 对象和 Blob 对象之间进行转化：</p><ol><li><p><strong>File 对象转化为 Blob 对象</strong>：</p><ul><li>File 对象本质上是 Blob 对象的子类，因此可以直接将 File 对象传递给期望接受 Blob 对象的方法。</li><li>例如，您可以使用 <code>Blob</code> 构造函数来将 File 对象转化为 Blob 对象，如 <code>new Blob([file])</code>。</li></ul></li><li><p><strong>Blob 对象转化为 File 对象</strong>：</p><ul><li>尽管 Blob 对象和 File 对象在很多方面相似，但 File 对象具有更多的元数据属性，如文件名、最后修改日期等。</li><li>如果您想将 Blob 对象转化为 File 对象，您需要创建一个新的 File 对象，同时提供必要的元数据属性。</li></ul></li></ol><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 将 File 对象转化为 Blob 对象</span><span class="token keyword">const</span> fileInput <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'input[type="file"]'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> file <span class="token operator">=</span> fileInput<span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> blob <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span><span class="token punctuation">[</span>file<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 将 Blob 对象转化为 File 对象（示例，需要额外的元数据）</span><span class="token keyword">const</span> blobData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'Hello, World!'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> fileFromBlob <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token punctuation">[</span>blobData<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'hello.txt'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'text/plain'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><a href="https://blog.csdn.net/MRlaochen/article/details/120209650">参考</a></p><h4 id="4-通知-Notifications-API"><a href="#4-通知-Notifications-API" class="headerlink" title="4) 通知 Notifications API"></a>4) 通知 Notifications API</h4><p>当网页需要向用户提供即时的重要信息时，可以使用浏览器的通知功能。通知可以在浏览器界面上以弹出窗口的形式显示，用户可以点击通知以执行相关操作。Web开发中可以使用Notifications API来创建和管理这些通知。</p><h5 id="通知权限"><a href="#通知权限" class="headerlink" title="通知权限"></a>通知权限</h5><p>在显示通知之前，浏览器会要求用户授予通知权限。这是为了保护用户的隐私，防止滥用通知功能。通知权限有三种状态：</p><ul><li>默认（default）：浏览器会询问用户是否允许通知。</li><li>允许（granted）：用户允许了通知权限。</li><li>拒绝（denied）：用户拒绝了通知权限。</li></ul><h5 id="显示通知"><a href="#显示通知" class="headerlink" title="显示通知"></a>显示通知</h5><p>要显示通知，可以遵循以下步骤：</p><ol><li>请求通知权限：使用 <code>Notification.requestPermission()</code> 方法来请求用户的通知权限。</li><li>创建通知：使用 <code>new Notification(title, options)</code> 构造函数来创建通知实例。</li><li>设置通知内容：在 <code>options</code> 参数中设置通知的标题、内容、图标等选项。</li><li>处理通知事件：可以监听通知的点击、显示和关闭事件。</li></ol><p>以下是一个显示通知的例子：</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Notifications Example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>showNotification<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>显示通知<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">const</span> showNotificationButton <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'showNotification'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    showNotificationButton<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 请求通知权限</span>      <span class="token keyword">const</span> permission <span class="token operator">=</span> <span class="token keyword">await</span> Notification<span class="token punctuation">.</span><span class="token function">requestPermission</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 如果用户允许通知权限</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>permission <span class="token operator">===</span> <span class="token string">'granted'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token punctuation">&#123;</span>          <span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token string">'这是一条通知消息。'</span><span class="token punctuation">,</span>          <span class="token literal-property property">icon</span><span class="token operator">:</span> <span class="token string">'icon.png'</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token comment">// 创建通知</span>        <span class="token keyword">const</span> notification <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Notification</span><span class="token punctuation">(</span><span class="token string">'新消息'</span><span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 监听通知点击事件</span>        notification<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'通知被点击'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token comment">// 监听通知显示事件</span>        notification<span class="token punctuation">.</span><span class="token function-variable function">onshow</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'通知已显示'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token comment">// 监听通知关闭事件</span>        notification<span class="token punctuation">.</span><span class="token function-variable function">onclose</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'通知已关闭'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>在这个例子中，当用户点击”显示通知”按钮时，会请求通知权限并根据用户的选择显示通知。通知被点击、显示和关闭时会触发相应的事件，我们可以在这些事件中执行相关操作。</p><p>需要注意的是，由于浏览器的安全策略，通常通知功能只能在 HTTPS 网站上使用。</p><h4 id="5-Page-Visibility-API"><a href="#5-Page-Visibility-API" class="headerlink" title="5) Page Visibility API"></a>5) Page Visibility API</h4><p>Page Visibility API是一个用于检测页面是否可见的浏览器API。它可以用来确定用户当前是否正在浏览页面，或者页面是否在后台标签页中。这对于优化页面性能、调整定时任务和资源加载等操作非常有用。</p><h5 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h5><ol><li><p>导入API：Page Visibility API是浏览器原生支持的，无需额外导入任何库或文件。</p></li><li><p>检测页面可见性：通过 <code>document.visibilityState</code> 属性来获取页面的可见状态。该属性可以返回以下几个值之一：</p><ul><li><code>&#39;visible&#39;</code>：页面当前可见。</li><li><code>&#39;hidden&#39;</code>：页面当前不可见，可能是在后台标签页或最小化窗口。</li><li><code>&#39;prerender&#39;</code>：页面在预加载状态，即页面正在加载但尚未显示。</li></ul></li><li><p>添加事件监听器：你可以通过 <code>visibilitychange</code> 事件来监听页面可见性状态的改变。当页面从可见切换为不可见，或者从不可见切换为可见时，该事件会被触发。</p></li></ol><h5 id="示例-4"><a href="#示例-4" class="headerlink" title="示例"></a>示例</h5><p>下面是一个简单的示例，展示了如何使用Page Visibility API：</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Page Visibility Example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>当前页面状态： <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>status<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">const</span> statusElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'status'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 更新页面状态</span>    <span class="token keyword">function</span> <span class="token function">updateStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>visibilityState <span class="token operator">===</span> <span class="token string">'visible'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        statusElement<span class="token punctuation">.</span>textContent <span class="token operator">=</span> <span class="token string">'可见'</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>visibilityState <span class="token operator">===</span> <span class="token string">'hidden'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        statusElement<span class="token punctuation">.</span>textContent <span class="token operator">=</span> <span class="token string">'不可见'</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>visibilityState <span class="token operator">===</span> <span class="token string">'prerender'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        statusElement<span class="token punctuation">.</span>textContent <span class="token operator">=</span> <span class="token string">'预加载'</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 初始化页面状态</span>    <span class="token function">updateStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 添加页面可见性改变事件监听器</span>    document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'visibilitychange'</span><span class="token punctuation">,</span> updateStatus<span class="token punctuation">)</span><span class="token punctuation">;</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>在这个示例中，页面加载时会显示当前页面的可见性状态，并且当页面可见性状态发生变化时，状态会自动更新。</p><p>通过Page Visibility API，你可以根据页面的可见性状态来优化你的应用程序行为，比如在页面不可见时停止定时任务、减少资源加载等。这对于提升用户体验和节省资源非常有用。</p><h5 id="不可见情况"><a href="#不可见情况" class="headerlink" title="不可见情况"></a>不可见情况</h5><p>页面在以下情况下会被认为是不可见的：</p><ol><li>切换到其他标签页或最小化浏览器窗口。</li><li>浏览器窗口被最小化，不在屏幕上显示。</li><li>页面被遮挡，例如被其他应用程序的窗口覆盖。</li><li>当用户的设备处于锁屏状态（例如移动设备的屏幕被锁定）。</li></ol><p>在这些情况下，页面会触发 Page Visibility API 的 <code>visibilitychange</code> 事件，其 <code>document.visibilityState</code> 属性会从 <code>&#39;visible&#39;</code> 变为 <code>&#39;hidden&#39;</code>。页面恢复到可见状态时，该属性会再次变为 <code>&#39;visible&#39;</code>。通过监听 <code>visibilitychange</code> 事件，你可以在页面状态发生变化时执行相应的操作。</p><h4 id="6-Streams-流"><a href="#6-Streams-流" class="headerlink" title="6) Streams 流"></a>6) Streams 流</h4><h5 id="1-什么是流？"><a href="#1-什么是流？" class="headerlink" title="1. 什么是流？"></a>1. 什么是流？</h5><p>在Node.js中，流是一种处理数据的方式，适用于大量数据，而不必一次性将整个数据加载到内存中。它将数据分成小块，逐个处理，从而提高了内存效率和性能。</p><h5 id="2-可读流（Readable-Streams）"><a href="#2-可读流（Readable-Streams）" class="headerlink" title="2. 可读流（Readable Streams）"></a>2. 可读流（Readable Streams）</h5><p>可读流用于从数据源（如文件、网络请求等）读取数据。以下是可读流的一些关键概念和API：</p><p><strong>关键API：</strong></p><ul><li><code>fs.createReadStream(path[, options])</code>：创建一个可读流来从指定路径读取数据。</li></ul><p><strong>示例代码：</strong></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> readableStream <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createReadStream</span><span class="token punctuation">(</span><span class="token string">'input.txt'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>readableStream<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">chunk</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Received chunk of data: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>chunk<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>readableStream<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'end'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'All data has been read.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="3-可写流（Writable-Streams）"><a href="#3-可写流（Writable-Streams）" class="headerlink" title="3. 可写流（Writable Streams）"></a>3. 可写流（Writable Streams）</h5><p>可写流用于将数据写入目标（如文件、网络连接等）。以下是可写流的一些关键概念和API：</p><p><strong>关键API：</strong></p><ul><li><code>fs.createWriteStream(path[, options])</code>：创建一个可写流以将数据写入指定路径。</li><li><code>writableStream.write(chunk[, encoding][, callback])</code>：写入数据块到流中。</li><li><code>writableStream.end([chunk][, encoding][, callback])</code>：结束写入流，可以传入最后一个数据块。</li></ul><p><strong>示例代码：</strong></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> writableStream <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createWriteStream</span><span class="token punctuation">(</span><span class="token string">'output.txt'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>writableStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'Hello,'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>writableStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">' World!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>writableStream<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>writableStream<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'finish'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'All data has been written.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="4-转换流（Transform-Streams）"><a href="#4-转换流（Transform-Streams）" class="headerlink" title="4. 转换流（Transform Streams）"></a>4. 转换流（Transform Streams）</h5><p>转换流兼具可读流和可写流的特性，允许在数据传输过程中进行转换。以下是使用转换流进行数据加密的示例：</p><p><strong>关键API：</strong></p><ul><li><code>stream.Transform</code>：这是一个类，可以用来创建自定义的转换流。</li><li><code>crypto.createCipher(algorithm, password[, options])</code>：创建一个加密转换流。</li></ul><p><strong>示例代码：</strong></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> crypto <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'crypto'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> readableStream <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createReadStream</span><span class="token punctuation">(</span><span class="token string">'input.txt'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> writableStream <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createWriteStream</span><span class="token punctuation">(</span><span class="token string">'output.txt'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> transformStream <span class="token operator">=</span> crypto<span class="token punctuation">.</span><span class="token function">createCipher</span><span class="token punctuation">(</span><span class="token string">'aes-256-cbc'</span><span class="token punctuation">,</span> <span class="token string">'secret-key'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>readableStream<span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>transformStream<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>writableStream<span class="token punctuation">)</span><span class="token punctuation">;</span>writableStream<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'finish'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Data has been encrypted and written.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="5-通过管道连接流（Piping-Streams）"><a href="#5-通过管道连接流（Piping-Streams）" class="headerlink" title="5. 通过管道连接流（Piping Streams）"></a>5. 通过管道连接流（Piping Streams）</h5><p>通过管道，你可以将一个流的输出连接到另一个流的输入，简化数据传输过程。</p><p><strong>关键API：</strong></p><ul><li><code>readableStream.pipe(writableStream)</code>：将一个可读流的输出管道连接到一个可写流的输入。</li></ul><p><strong>示例代码：</strong></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> readableStream <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createReadStream</span><span class="token punctuation">(</span><span class="token string">'input.txt'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> writableStream <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createWriteStream</span><span class="token punctuation">(</span><span class="token string">'output.txt'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>readableStream<span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>writableStream<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="7-动画与Canvas图形"><a href="#7-动画与Canvas图形" class="headerlink" title="7) 动画与Canvas图形"></a>7) 动画与Canvas图形</h4><p>当然，以下是关于”动画与Canvas图形”主题的更详细的内容，包括概念、作用、语法和示例代码。</p><h5 id="1-使用-requestAnimationFrame"><a href="#1-使用-requestAnimationFrame" class="headerlink" title="1. 使用 requestAnimationFrame"></a>1. 使用 <code>requestAnimationFrame</code></h5><h6 id="1-1-早期定时动画"><a href="#1-1-早期定时动画" class="headerlink" title="1.1 早期定时动画"></a>1.1 早期定时动画</h6><p>在过去，使用<code>setInterval</code>或<code>setTimeout</code>创建定时动画，但这可能导致不稳定的动画效果。</p><h6 id="1-2-时间间隔的问题"><a href="#1-2-时间间隔的问题" class="headerlink" title="1.2 时间间隔的问题"></a>1.2 时间间隔的问题</h6><p>不同设备、浏览器和帧率设置可能导致定时器创建的动画速度不同步。</p><h6 id="1-3-requestAnimationFrame"><a href="#1-3-requestAnimationFrame" class="headerlink" title="1.3 requestAnimationFrame"></a>1.3 <code>requestAnimationFrame</code></h6><p><code>requestAnimationFrame</code>是现代化的动画方式，它在浏览器绘制下一帧之前调用指定的回调函数，保持了更平稳的帧率。</p><p><strong>语法：</strong></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> animationId <span class="token operator">=</span> <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>示例：</strong></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 执行动画操作</span>  <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>animate<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h6 id="1-4-cancelAnimationFrame"><a href="#1-4-cancelAnimationFrame" class="headerlink" title="1.4 cancelAnimationFrame"></a>1.4 <code>cancelAnimationFrame</code></h6><p>使用<code>cancelAnimationFrame</code>取消之前通过<code>requestAnimationFrame</code>创建的动画。</p><p><strong>语法：</strong></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">cancelAnimationFrame</span><span class="token punctuation">(</span>animationId<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h6 id="1-5-通过-requestAnimationFrame-节流"><a href="#1-5-通过-requestAnimationFrame-节流" class="headerlink" title="1.5 通过 requestAnimationFrame 节流"></a>1.5 通过 <code>requestAnimationFrame</code> 节流</h6><p>使用<code>requestAnimationFrame</code>可以避免过度绘制，优化性能。</p><p><strong>示例：</strong></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> requestId<span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 执行动画操作</span>  requestId <span class="token operator">=</span> <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>animate<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">stopAnimation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">cancelAnimationFrame</span><span class="token punctuation">(</span>requestId<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h5 id="2-基本的画布功能"><a href="#2-基本的画布功能" class="headerlink" title="2. 基本的画布功能"></a>2. 基本的画布功能</h5><p>Canvas是一个HTML元素，用于通过JavaScript绘制图形、图像和动画。</p><h5 id="3-2D-绘图上下文"><a href="#3-2D-绘图上下文" class="headerlink" title="3. 2D 绘图上下文"></a>3. 2D 绘图上下文</h5><h6 id="3-1-填充和描边"><a href="#3-1-填充和描边" class="headerlink" title="3.1 填充和描边"></a>3.1 填充和描边</h6><p>通过设置<code>fillStyle</code>和<code>strokeStyle</code>属性，可以设置填充和描边颜色。</p><p><strong>示例：</strong></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> canvas <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'myCanvas'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> ctx <span class="token operator">=</span> canvas<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">'2d'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ctx<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> <span class="token string">'red'</span><span class="token punctuation">;</span>ctx<span class="token punctuation">.</span><span class="token function">fillRect</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ctx<span class="token punctuation">.</span>strokeStyle <span class="token operator">=</span> <span class="token string">'blue'</span><span class="token punctuation">;</span>ctx<span class="token punctuation">.</span><span class="token function">strokeRect</span><span class="token punctuation">(</span><span class="token number">70</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h6 id="3-2-绘制矩形"><a href="#3-2-绘制矩形" class="headerlink" title="3.2 绘制矩形"></a>3.2 绘制矩形</h6><p>使用<code>fillRect()</code>和<code>strokeRect()</code>方法绘制矩形。</p><p><strong>示例：</strong></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">ctx<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> <span class="token string">'green'</span><span class="token punctuation">;</span>ctx<span class="token punctuation">.</span><span class="token function">fillRect</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ctx<span class="token punctuation">.</span>strokeStyle <span class="token operator">=</span> <span class="token string">'purple'</span><span class="token punctuation">;</span>ctx<span class="token punctuation">.</span><span class="token function">strokeRect</span><span class="token punctuation">(</span><span class="token number">70</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h6 id="3-3-绘制路径"><a href="#3-3-绘制路径" class="headerlink" title="3.3 绘制路径"></a>3.3 绘制路径</h6><p>通过路径绘制可以创建更复杂的图形。</p><p><strong>示例：</strong></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">ctx<span class="token punctuation">.</span><span class="token function">beginPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ctx<span class="token punctuation">.</span><span class="token function">moveTo</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ctx<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ctx<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ctx<span class="token punctuation">.</span><span class="token function">closePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ctx<span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h6 id="3-4-绘制文本"><a href="#3-4-绘制文本" class="headerlink" title="3.4 绘制文本"></a>3.4 绘制文本</h6><p>使用<code>fillText()</code>和<code>strokeText()</code>方法在Canvas上绘制文本。</p><p><strong>示例：</strong></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">ctx<span class="token punctuation">.</span>font <span class="token operator">=</span> <span class="token string">'20px Arial'</span><span class="token punctuation">;</span>ctx<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> <span class="token string">'black'</span><span class="token punctuation">;</span>ctx<span class="token punctuation">.</span><span class="token function">fillText</span><span class="token punctuation">(</span><span class="token string">'Hello, Canvas'</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h6 id="3-5-变换"><a href="#3-5-变换" class="headerlink" title="3.5 变换"></a>3.5 变换</h6><p>使用<code>translate()</code>、<code>rotate()</code>和<code>scale()</code>等方法进行图形变换。</p><p><strong>示例：</strong></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">ctx<span class="token punctuation">.</span><span class="token function">translate</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ctx<span class="token punctuation">.</span><span class="token function">rotate</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ctx<span class="token punctuation">.</span><span class="token function">fillRect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h6 id="3-6-绘制图像"><a href="#3-6-绘制图像" class="headerlink" title="3.6 绘制图像"></a>3.6 绘制图像</h6><p>通过<code>drawImage()</code>方法将图像绘制到Canvas上。</p><p><strong>示例：</strong></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> image <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>image<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">'image.png'</span><span class="token punctuation">;</span>image<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  ctx<span class="token punctuation">.</span><span class="token function">drawImage</span><span class="token punctuation">(</span>image<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><h6 id="3-7-阴影"><a href="#3-7-阴影" class="headerlink" title="3.7 阴影"></a>3.7 阴影</h6><p>可以通过设置阴影属性为图形添加阴影效果。</p><p><strong>示例：</strong></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">ctx<span class="token punctuation">.</span>shadowBlur <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>ctx<span class="token punctuation">.</span>shadowColor <span class="token operator">=</span> <span class="token string">'gray'</span><span class="token punctuation">;</span>ctx<span class="token punctuation">.</span><span class="token function">fillRect</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h6 id="3-8-渐变"><a href="#3-8-渐变" class="headerlink" title="3.8 渐变"></a>3.8 渐变</h6><p>使用<code>createLinearGradient()</code>和<code>createRadialGradient()</code>方法创建渐变。</p><p><strong>示例：</strong></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> gradient <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token function">createLinearGradient</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>gradient<span class="token punctuation">.</span><span class="token function">addColorStop</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'red'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>gradient<span class="token punctuation">.</span><span class="token function">addColorStop</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'blue'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ctx<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> gradient<span class="token punctuation">;</span>ctx<span class="token punctuation">.</span><span class="token function">fillRect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h6 id="3-9-图案"><a href="#3-9-图案" class="headerlink" title="3.9 图案"></a>3.9 图案</h6><p>使用<code>createPattern()</code>方法创建填充图案。</p><p><strong>示例：</strong></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> image <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>image<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">'pattern.png'</span><span class="token punctuation">;</span>image<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> pattern <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token function">createPattern</span><span class="token punctuation">(</span>image<span class="token punctuation">,</span> <span class="token string">'repeat'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  ctx<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> pattern<span class="token punctuation">;</span>  ctx<span class="token punctuation">.</span><span class="token function">fillRect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><h6 id="3-10-图像数据"><a href="#3-10-图像数据" class="headerlink" title="3.10 图像数据"></a>3.10 图像数据</h6><p>通过像素数据可以进行图像处理操作。</p><p><strong>示例：</strong></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> imageData <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token function">getImageData</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> canvas<span class="token punctuation">.</span>width<span class="token punctuation">,</span> canvas<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> data <span class="token operator">=</span> imageData<span class="token punctuation">.</span>data<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> data<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> r <span class="token operator">=</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> g <span class="token operator">=</span> data<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> b <span class="token operator">=</span> data<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 处理像素数据</span><span class="token punctuation">&#125;</span>ctx<span class="token punctuation">.</span><span class="token function">putImageData</span><span class="token punctuation">(</span>imageData<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h6 id="3-11-合成"><a href="#3-11-合成" class="headerlink" title="3.11 合成"></a>3.11 合成</h6><p>通过<code>globalCompositeOperation</code>属性设置图形的合成模式。</p><p><strong>示例：</strong></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">ctx<span class="token punctuation">.</span>globalCompositeOperation <span class="token operator">=</span> <span class="token string">'multiply'</span><span class="token punctuation">;</span>ctx<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> <span class="token string">'red'</span><span class="token punctuation">;</span>ctx<span class="token punctuation">.</span><span class="token function">fillRect</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ctx<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> <span class="token string">'blue'</span><span class="token punctuation">;</span>ctx<span class="token punctuation">.</span><span class="token function">fillRect</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="4-WebGL"><a href="#4-WebGL" class="headerlink" title="4. WebGL"></a>4. WebGL</h5><p>WebGL是基于OpenGL的Web图形库，用于创建高性能的3D和2D图形。</p><h6 id="4-1-WebGL-上下文"><a href="#4-1-WebGL-上下文" class="headerlink" title="4.1 WebGL 上下文"></a>4.1 WebGL 上下文</h6><p>使用<code>canvas.getContext(&#39;webgl&#39;)</code>获取WebGL上下文。</p><h6 id="4-2-WebGL-基础"><a href="#4-2-WebGL-基础" class="headerlink" title="4.2 WebGL 基础"></a>4.2 WebGL 基础</h6><p>WebGL使用着色器控制图形绘制，需要了解顶点和片元着色器。</p><h6 id="4-3-WebGL1-与-WebGL2"><a href="#4-3-WebGL1-与-WebGL2" class="headerlink" title="4.3 WebGL1 与 WebGL2"></a>4.3 WebGL1 与 WebGL2</h6><p>WebGL2提供更多功能和性能优势。</p><h3 id="错误处理和调试"><a href="#错误处理和调试" class="headerlink" title="错误处理和调试"></a>错误处理和调试</h3><h4 id="1-错误处理"><a href="#1-错误处理" class="headerlink" title="1) 错误处理"></a>1) 错误处理</h4><p><strong>try&#x2F;catch 语句</strong><br>try&#x2F;catch 语句是 JavaScript 中用于处理异常的基本机制之一。它允许开发者将可能出现错误的代码包裹在 try 代码块中，并在 catch 代码块中捕获并处理错误。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 可能会发生错误的代码</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 捕获并处理错误</span><span class="token punctuation">&#125;</span></code></pre><p><strong>抛出错误</strong><br>除了捕获错误外，JavaScript 还允许开发者手动抛出错误，即在代码中主动触发错误。可以使用 <code>throw</code> 语句来实现。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"This is a custom error."</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>通过 <code>throw</code> 语句，开发者可以自定义错误消息，并且将错误传递给上层调用的代码，直到找到相应的错误处理机制。<br><strong>error 事件</strong><br>除了使用 try&#x2F;catch 语句来处理错误外，JavaScript 还提供了 error 事件，用于在发生未被捕获的全局错误时进行处理。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">window<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">message<span class="token punctuation">,</span> source<span class="token punctuation">,</span> lineno<span class="token punctuation">,</span> colno<span class="token punctuation">,</span> error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 处理全局错误</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><p>当页面上的 JavaScript 代码发生未被捕获的错误时，error 事件会被触发，同时提供相关的错误信息，如错误消息、错误来源文件、行号、列号和错误对象。</p><p>除此之外, 还有错误处理策略 识别错误 区分重大与非重大错误 把错误记录到服务器…</p><h4 id="2-调试"><a href="#2-调试" class="headerlink" title="2) 调试"></a>2) 调试</h4><p><strong>把消息记录到控制台</strong></p><p>在开发过程中，开发者可以使用控制台来输出消息，从而查看代码的执行情况和调试信息。可以使用 <code>console.log()</code> 方法将消息记录到控制台。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"This is a log message."</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>使用 JavaScript 调试器</strong></p><p>大多数现代浏览器都提供了内置的 JavaScript 调试器，可以帮助开发者逐行调试代码、设置断点、查看变量值等。在调试器中，可以单步执行代码，查看每一步的执行结果。</p><p><strong>在页面中打印</strong></p><p>除了使用控制台输出消息外，开发者还可以在页面中直接显示调试消息，以便更直观地查看代码执行情况。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"debug"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token string">"This is a debug message."</span><span class="token punctuation">;</span></code></pre><p><strong>补充控制台方法</strong></p><p>除了 <code>console.log()</code> 方法外，控制台还提供了其他有用的调试方法，如：</p><ul><li><code>console.error()</code>: 输出错误消息，通常用于输出报错信息。</li><li><code>console.warn()</code>: 输出警告消息，用于提示潜在的问题。</li><li><code>console.info()</code>: 输出信息性消息，用于输出一些额外信息。</li></ul><h3 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h3><p>JSON是一种轻量级的数据交换格式，用于在不同系统之间传递和存储数据。它采用键值对的形式来表示数据，非常易读且易于解析</p><ol><li>解析 JSON：<br>在JavaScript中，可以使用<code>JSON.parse()</code>方法将JSON字符串解析为JavaScript对象</li><li>JSON 序列化：<br>在JavaScript中，可以使用<code>JSON.stringify()</code>方法将JavaScript对象转换为JSON字符串</li></ol><h3 id="网络请求与远程资源"><a href="#网络请求与远程资源" class="headerlink" title="网络请求与远程资源"></a>网络请求与远程资源</h3><h4 id="1）XMLHttpRequest"><a href="#1）XMLHttpRequest" class="headerlink" title="1）XMLHttpRequest"></a>1）XMLHttpRequest</h4><blockquote><p>XMLHttpRequest (XHR) 是一个内置于浏览器的 JavaScript 对象，它允许客户端与服务器进行异步通信。使用 XMLHttpRequest，你可以在不刷新整个页面的情况下，向服务器发送请求，并接收和处理来自服务器的响应。</p></blockquote><p>XHR 的基本用法包括以下步骤：</p><ol><li>创建 XMLHttpRequest 对象：通过 <code>new XMLHttpRequest()</code> 创建一个 XMLHttpRequest 对象。</li><li>设置请求参数：使用 <code>open()</code> 方法设置请求的类型（GET、POST等）和目标 URL。</li><li>监听事件：注册事件处理程序，以便在请求状态发生变化时处理相应的事件，例如 <code>onload</code>、<code>onerror</code>、<code>onprogress</code> 等。</li><li>发送请求：使用 <code>send()</code> 方法发送请求到服务器。对于 POST 请求，可能需要在 <code>send()</code> 方法中包含请求体数据。</li><li>处理响应：在事件处理程序中处理来自服务器的响应数据，可以通过 <code>responseText</code>、<code>responseXML</code>、<code>status</code> 等属性来获取服务器响应的数据和状态。</li></ol><p>下面是一个简单的示例代码，演示如何使用 XMLHttpRequest 发送一个 GET 请求并处理响应：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 创建 XMLHttpRequest 对象</span><span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 设置请求参数</span>xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'https://api.example.com/data'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 监听事件</span>xhr<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">>=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 请求成功，处理响应数据</span>    <span class="token keyword">var</span> responseData <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>responseData<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 请求失败</span>    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'Request failed with status:'</span><span class="token punctuation">,</span> xhr<span class="token punctuation">.</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>xhr<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 请求发生错误</span>  console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'Request error:'</span><span class="token punctuation">,</span> xhr<span class="token punctuation">.</span>statusText<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 发送请求</span>xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>注意事项和一些常见用法：</strong></p><ul><li>跨域请求：XHR 默认不允许跨域请求，如果需要跨域请求，服务器需要设置合适的响应头（如 CORS）来允许跨域。</li><li>异步请求：XHR 默认是异步的，可以在 <code>open()</code> 方法的第三个参数设置为 <code>false</code> 来进行同步请求，但不推荐这样做，因为会阻塞页面渲染。</li><li>请求头和请求体：可以使用 <code>setRequestHeader()</code> 方法设置请求头，对于 POST 请求，可以在 <code>send()</code> 方法中传递请求体数据。</li><li>上传文件：使用 <code>upload</code> 属性来监听文件上传的进度。</li><li>中止请求：使用 <code>abort()</code> 方法可以中止正在进行的请求。</li><li>进度事件：通过 <code>onprogress</code> 监听请求进度事件，例如下载文件的进度。</li></ul><p><strong>XHR 的常用属性和方法：</strong></p><ul><li>onload: 当请求成功完成时触发的事件。</li><li>onerror: 当请求发生错误时触发的事件。</li><li>onprogress: 当请求的进度发生变化时触发的事件，常用于显示请求的进度条。</li><li>open(method, url, async): 设置请求的类型、URL和是否异步。</li><li>send(data): 发送请求到服务器，可以附带请求体数据。</li><li>abort(): 中止当前的请求。</li><li>responseText: 作为响应体返回的文本。</li><li>responseXML: 如果响应的内容类型是 “text&#x2F;xml” 或 “application&#x2F;xml”，则是包含响应数据的 XML DOM 文档。</li><li>status: 响应的 HTTP 状态码。</li><li>statusText: 响应的 HTTP 状态描述。</li></ul><h5 id="HTTP-头部"><a href="#HTTP-头部" class="headerlink" title="HTTP 头部"></a>HTTP 头部</h5><blockquote><p>每个 HTTP 请求和响应都会携带一些头部字段，这些字段对开发者非常有用。XHR（XMLHttpRequest）对象通过一些方法暴露与请求和响应相关的头部字段。</p></blockquote><p><strong>常见的HTTP请求头部：</strong></p><ol><li>Accept：浏览器能够处理的内容类型。</li><li>Accept-Language：浏览器能够处理的语言类型。</li><li>Cache-Control：指定请求或响应的缓存行为。</li><li>User-Agent：浏览器的用户代理字符串，用于标识浏览器和操作系统。</li><li>Referer（或者是正确拼写的Referrer）：表示请求的来源页面URI。</li><li>Host：请求目标的主机名和端口号。</li><li>Authorization：用于发送身份验证凭据，通常在发送HTTP基本认证时使用。</li><li>Cookie：用于发送服务器保存的Cookie信息。</li><li>Content-Type：请求体中的数据类型，用于POST请求。</li></ol><p><strong>常见的HTTP响应头部：</strong></p><ol><li>Cache-Control：指定响应的缓存行为。</li><li>Content-Type：响应体中的数据类型。</li><li>Content-Length：响应体的字节数。</li><li>Set-Cookie：用于在浏览器中设置Cookie。</li><li>Last-Modified：指定响应资源的最后修改时间。</li><li>ETag：响应资源的标识，用于缓存验证。</li><li>Location：重定向响应中的新的URL。</li><li>Access-Control-Allow-Origin：指定允许跨域请求的源。</li></ol><p><strong>自定义头部</strong><br>如果需要发送额外的请求头部，可以使用 <code>setRequestHeader()</code> 方法。这个方法接收两个参数：头部字段的名称和值。为保证请求头部被发送，必须在 <code>open()</code> 之后、<code>send()</code> 之前调用 <code>setRequestHeader()</code>。</p><p>可以使用 <code>getResponseHeader()</code> 方法从 XHR 对象获取响应头部，只要传入要获取头部的名称即可。如果想取得所有响应头部，可以使用 <code>getAllResponseHeaders()</code> 方法，这个方法会返回包含所有响应头部的字符串。</p><h5 id="GET-请求"><a href="#GET-请求" class="headerlink" title="GET 请求"></a>GET 请求</h5><ol><li>GET请求用于向服务器查询某些信息，通常用于请求获取资源，如页面、图片、文本文件等。</li><li>GET请求将参数放在URL的查询字符串中，参数必须使用<code>encodeURIComponent()</code>进行编码，并且所有参数对以”&amp;”分隔。</li><li>GET请求对参数长度有限制，通常在2048个字符左右，超过限制可能会导致参数丢失或截断。</li><li>GET请求可以被缓存，可以被书签保存，可以被浏览器历史记录保存。</li></ol><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 发送GET请求</span>xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"get"</span><span class="token punctuation">,</span> <span class="token string">"example.php?name1=value1&amp;name2=value2"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="Post-请求"><a href="#Post-请求" class="headerlink" title="Post 请求"></a>Post 请求</h5><ol><li>POST请求用于向服务器提交数据，通常用于提交表单数据、上传文件等。</li><li>POST请求将参数放在请求体中，不会在URL中显示参数，所以参数对长度没有限制。</li><li>POST请求不会被缓存，不会被书签保存，也不会被浏览器历史记录保存。</li><li>POST请求对数据的安全性较好，因为参数不会暴露在URL中，但是仍然可以通过抓包等手段查看请求体中的数据。</li></ol><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 发送POST请求</span>xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"post"</span><span class="token punctuation">,</span> <span class="token string">"example.php"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">"Content-Type"</span><span class="token punctuation">,</span> <span class="token string">"application/x-www-form-urlencoded"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"name=John&amp;age=30"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>注意：POST请求相比GET请求要占用更多资源，性能方面GET请求比POST请求要快两倍。</p><h5 id="FormData-类型"><a href="#FormData-类型" class="headerlink" title="FormData 类型"></a>FormData 类型</h5><p>用于便捷地处理表单数据的序列化和提交。FormData对象可以通过append()方法添加键值对，相当于表单字段名称和对应的值。可以通过直接传入一个表单元素来创建FormData对象，也可以手动添加键值对。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 使用FormData序列化表单数据并发送POST请求</span><span class="token keyword">let</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"post"</span><span class="token punctuation">,</span> <span class="token string">"example.php"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> form <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"user-info"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span>form<span class="token punctuation">)</span><span class="token punctuation">;</span>xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="2）跨域资源共享-CORS"><a href="#2）跨域资源共享-CORS" class="headerlink" title="2）跨域资源共享 CORS"></a>2）跨域资源共享 CORS</h4><blockquote><p>由于同源策略限制,XHR只能访问与发起请求的页面在同一个域内的资源</p><p>跨源资源共享（CORS，Cross-Origin Resource Sharing）定义了浏览器与服务器之间如何实现跨源通信。CORS背后的基本思路是使用自定义的HTTP头部允许浏览器和服务器相互了解，以确切地确定请求或响应是否应该成功或失败</p><p>请求在发送时会有一个额外的头部叫Origin。Origin头部包含发送请求的页面的源（协议、域名和端口），以便服务器确定是否为其提供响应</p><p>如果服务器决定响应请求，那么应该发送Access-Control-Allow-Origin头部，包含相同的源</p></blockquote><h4 id="3）预检请求"><a href="#3）预检请求" class="headerlink" title="3）预检请求"></a>3）预检请求</h4><blockquote><p>需预检的请求要求必须首先使用 OPTIONS 方法发起一个预检请求到服务器，以获知服务器是否允许该实际请求。”预检请求“的使用，可以避免跨域请求对服务器的用户数据产生未预期的影响</p></blockquote><p>下面的请求会触发预检请求，其实非简单请求之外的就会触发预检，就不用记那么多了</p><ol><li>使用了PUT、DELETE、CONNECT、OPTIONS、TRACE、PATCH方法</li><li>人为设置了非规定内的其他首部字段，参考上面简单请求的安全字段集合，还要特别注意Content-Type的类型</li></ol><h4 id="4）替代性跨源政策"><a href="#4）替代性跨源政策" class="headerlink" title="4）替代性跨源政策"></a>4）替代性跨源政策</h4><blockquote><p>图片探测<br>jsonp</p></blockquote><h4 id="5）Fetch-API"><a href="#5）Fetch-API" class="headerlink" title="5）Fetch API"></a>5）Fetch API</h4><p><strong>概念：</strong><br>Fetch是JavaScript中用于进行网络请求的现代API。它提供了一种更简洁、更灵活的方式来发起HTTP请求，并取代了传统的XMLHttpRequest对象。Fetch API返回一个Promise，使得网络请求可以使用更现代的异步编程方式来处理。</p><p><strong>用法：</strong><br>使用Fetch API非常简单，可以通过全局的<code>fetch()</code>函数发起网络请求。<code>fetch()</code>函数接收一个URL作为第一个参数，并返回一个Promise。通过使用<code>.then()</code>方法处理响应数据，并使用<code>.catch()</code>方法处理错误。</p><p><strong>参数：</strong><br><code>fetch()</code>函数接受两个参数：URL和可选的配置对象。配置对象可以用于自定义请求，包括请求方法、请求头部、请求体等。常见的配置选项包括：</p><ul><li><code>method</code>: 指定请求方法，如GET、POST、PUT、DELETE等，默认为GET。</li><li><code>headers</code>: 指定请求头部，可设置自定义头部，如Content-Type、Authorization等。</li><li><code>body</code>: 指定请求体，用于POST和PUT请求，可以是FormData、JSON等格式。</li><li><code>mode</code>: 指定请求的模式，如cors、no-cors、same-origin等。</li><li><code>credentials</code>: 指定是否发送凭据，如cookie等，默认为same-origin。</li><li><code>cache</code>: 指定请求的缓存模式，如default、no-store、reload等。</li><li><code>redirect</code>: 指定重定向模式，如follow、error、manual等。</li></ul><p><strong>案例：</strong><br>以下是一个简单的Fetch请求案例，用于从API中获取JSON数据并处理响应：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 发起Fetch请求</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'https://api.example.com/data'</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>response<span class="token punctuation">.</span>ok<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'Network response was not ok'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 处理响应数据</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">error</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 处理错误</span>    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'Error:'</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在这个案例中，首先使用<code>fetch()</code>函数发起请求，然后使用<code>.then()</code>方法处理响应数据，如果响应状态码不在200到299的范围内，则会抛出一个错误。最后，使用<code>.catch()</code>方法处理任何错误情况。</p><h4 id="6）WebSocket-套接字"><a href="#6）WebSocket-套接字" class="headerlink" title="6）WebSocket(套接字)"></a>6）WebSocket(套接字)</h4><blockquote><p>WebSocket是一种基于TCP的网络通信协议，它提供了全双工、持久化的连接，允许在客户端和服务器之间进行实时数据传输。相比传统的HTTP请求，WebSocket能够实现低延迟、高效率的双向通信，适用于需要实时性的应用场景，如即时聊天、实时通知、在线游戏等。</p></blockquote><p><strong>要点概述：</strong></p><ol><li>建立连接：WebSocket连接的建立需要经过一个握手过程，客户端通过发送WebSocket握手请求，服务器响应后建立连接。一旦连接建立，双方可以互相发送数据。</li><li>全双工通信：WebSocket允许在同一个连接上同时进行双向通信，客户端和服务器都可以随时发送消息，而不需要依赖请求-响应模式。</li><li>持久连接：WebSocket连接一旦建立，会保持持久性，直到客户端或服务器端关闭连接。</li><li>低延迟：相比传统的HTTP请求，WebSocket的握手过程相对较轻量，且数据传输更加高效，因此具有较低的延迟。</li></ol><p><strong>用法：</strong><br>在JavaScript中使用WebSocket API，可以通过创建WebSocket实例来建立与服务器的连接，并使用WebSocket提供的方法来发送和接收数据。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 创建WebSocket实例</span><span class="token keyword">const</span> socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span><span class="token string">'wss://example.com'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 监听连接成功事件</span>socket<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'open'</span><span class="token punctuation">,</span> <span class="token parameter">event</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'WebSocket连接已建立'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 监听消息接收事件</span>socket<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'message'</span><span class="token punctuation">,</span> <span class="token parameter">event</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'接收到消息：'</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 监听连接关闭事件</span>socket<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'close'</span><span class="token punctuation">,</span> <span class="token parameter">event</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'WebSocket连接已关闭'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 发送消息</span>socket<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'Hello, WebSocket!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在这个例子中，我们首先创建了一个WebSocket实例，并指定了服务器的WebSocket地址。然后，我们监听了连接成功事件、消息接收事件和连接关闭事件，并在事件处理程序中处理相应的操作。最后，我们使用<code>send()</code>方法发送消息到服务器。</p><p><strong>参数：</strong></p><blockquote><p>WebSocket构造函数接受一个URL参数，用于指定WebSocket服务器的地址。URL的协议必须是ws（WebSocket）或wss（WebSocket Secure）。例如，ws:&#x2F;&#x2F;example.com表示普通的WebSocket连接，wss:&#x2F;&#x2F;example.com表示加密的WebSocket连接。</p><p>除了URL参数外，WebSocket还支持一些事件监听器，用于处理连接状态、消息接收等事件。</p><p>WebSocket API还提供了一些方法，如send()用于发送数据、close()用于关闭连接等。</p></blockquote><p><strong>案例：</strong><br>以下是一个简单的WebSocket应用案例，实现了一个简单的聊天室功能。</p><p>服务端（Node.js）：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> WebSocket <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'ws'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> wss <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket<span class="token punctuation">.</span>Server</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">port</span><span class="token operator">:</span> <span class="token number">8080</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>wss<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'connection'</span><span class="token punctuation">,</span> <span class="token parameter">ws</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  ws<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'message'</span><span class="token punctuation">,</span> <span class="token parameter">message</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    wss<span class="token punctuation">.</span>clients<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">client</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>client <span class="token operator">!==</span> ws <span class="token operator">&amp;&amp;</span> client<span class="token punctuation">.</span>readyState <span class="token operator">===</span> WebSocket<span class="token punctuation">.</span><span class="token constant">OPEN</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        client<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>客户端（JavaScript）：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span><span class="token string">'ws://localhost:8080'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>socket<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'open'</span><span class="token punctuation">,</span> <span class="token parameter">event</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'WebSocket连接已建立'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>socket<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'message'</span><span class="token punctuation">,</span> <span class="token parameter">event</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'接收到消息：'</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> message <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>  socket<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在这个案例中，我们使用Node.js创建了一个WebSocket服务器，并在客户端使用JavaScript建立了WebSocket连接。客户端可以通过输入框输入消息并点击按钮发送到服务器，然后服务器会将消息广播给所有连接的客户端，实现简单的聊天室功能。</p><h4 id="7）前端安全"><a href="#7）前端安全" class="headerlink" title="7）前端安全"></a>7）前端安全</h4><p><strong>XSS</strong></p><blockquote><p>XSS（跨站脚本攻击，Cross-Site Scripting）是一种常见的Web安全漏洞，攻击者通过注入恶意脚本代码到受信任的网页中，使得用户在浏览该网页时受到攻击。攻击者利用这种漏洞可以窃取用户的信息、执行恶意操作，或者将用户重定向到恶意网站。</p><p>XSS攻击的原理是将恶意的脚本代码注入到网页中，然后这些代码被其他用户的浏览器执行，导致了攻击。XSS攻击通常分为三类：反射型、存储型和DOM-based。</p></blockquote><ol><li>反射型XSS：<ul><li>攻击者构造包含恶意脚本的URL，并通过诱使用户点击该URL来触发攻击。</li><li>服务器接收到URL中的恶意脚本后，将其作为响应返回给用户的浏览器。</li><li>用户浏览器执行响应中的恶意脚本，从而实现攻击目的。<blockquote><p>示例：<br>假设一个搜索页面接收用户的搜索关键字，并将其显示在搜索结果页面上。攻击者构造一个包含恶意脚本的搜索关键字，并通过URL将其传递给服务器。服务器将恶意脚本拼接到搜索结果页面上，用户浏览器执行脚本，导致攻击。</p></blockquote></li></ul></li><li>存储型XSS：<ul><li>攻击者将恶意脚本提交到服务器上，服务器将脚本保存到数据库或文件中。</li><li>用户访问包含恶意脚本的页面时，服务器从数据库或文件中读取脚本，并将其返回给用户浏览器。</li><li>用户浏览器执行脚本，实现攻击目的。<blockquote><p>示例：<br>假设一个用户评论功能，用户可以在评论中输入文本，评论内容会被保存到数据库。攻击者在评论中输入恶意脚本并提交，服务器将恶意脚本保存到数据库。其他用户浏览评论时，服务器将恶意脚本返回给用户浏览器，导致攻击。</p></blockquote></li></ul></li><li>DOM-based XSS：<ul><li>攻击者通过修改网页的DOM结构来实现攻击，而不需要向服务器提交恶意脚本。</li><li>用户浏览器执行修改后的DOM结构中的恶意脚本，实现攻击目的。<blockquote><p>示例：<br>假设一个网页上有一个搜索框，用户输入搜索关键字后，网页上的内容会动态更新。攻击者构造一个恶意链接，其中包含修改DOM结构的脚本。用户点击该链接后，恶意脚本会修改页面的DOM结构，导致攻击。</p></blockquote></li></ul></li></ol><p>防范XSS攻击的方法包括输入验证、输出转义、设置HTTP头部、使用CSP（内容安全策略）等。开发人员和网站管理员应该采用这些安全措施，以保护用户和网站的安全。</p><p><strong>CSRF</strong></p><blockquote><p>CSRF（跨站请求伪造，Cross-Site Request Forgery）是一种常见的Web安全漏洞，攻击者通过伪装用户的身份向网站发送恶意请求，利用用户在该网站上已登录的身份进行攻击。CSRF攻击可以导致用户在不知情的情况下执行恶意操作，比如修改个人信息、转账、删除数据等。</p><p>CSRF攻击的原理是攻击者构造恶意请求，并诱使用户在已经登录的情况下访问这个请求。由于用户已经登录到目标网站，浏览器会自动发送相应的cookie等认证信息，从而使得目标网站认为这是用户的合法请求。</p></blockquote><blockquote><p>示例：<br>  假设用户已经登录到某个银行网站，银行网站使用GET请求来实现转账功能，请求格式为<code>http://bank.com/transfer?to=attacker&amp;amount=1000</code>，其中<code>to</code>参数为转账的目标账户，<code>amount</code>参数为转账金额。攻击者构造一个包含上述请求的页面，并诱使用户访问这个页面，用户的浏览器会自动执行该GET请求，导致用户的账户向攻击者的账户转账1000元。</p></blockquote><p>防范CSRF攻击的方法包括：</p><ol><li>验证HTTP Referer头部：服务器端可以通过验证请求头部中的Referer字段来确定请求是否来自合法来源。但是该方法并不是绝对可靠，因为Referer字段有时会被修改或省略。</li><li>使用CSRF Token：服务器端在每个表单中生成一个随机的CSRF Token，并在提交表单时验证该Token的有效性。攻击者无法获取到合法的Token，从而无法伪造合法的请求。</li><li>使用SameSite Cookie属性：可以将Cookie的SameSite属性设置为Strict或Lax，限制Cookie只能在同站点下发送，从而防止CSRF攻击。</li></ol><p>开发人员和网站管理员应该采取合适的措施来防范CSRF攻击，确保用户的账户和数据安全。</p><h3 id="客户端存储"><a href="#客户端存储" class="headerlink" title="客户端存储"></a>客户端存储</h3><p>当涉及前端客户端存储时，常用的三种方式是Cookies、Web Storage（localStorage和sessionStorage）以及IndexedDB。下面将对每种方式进行详细说明并举例说明其用法和适用场景：</p><h4 id="1）Cookie"><a href="#1）Cookie" class="headerlink" title="1）Cookie"></a>1）Cookie</h4><ul><li>语法：Cookies是浏览器中存储的小型文本文件，可以通过设置document.cookie来创建、读取和删除Cookie。</li><li>使用方式：Cookies通常用于存储会话信息、用户偏好设置、身份验证令牌等，并且在每个HTTP请求中都会发送到服务器。</li><li>适用场景：由于Cookies的存储容量有限（通常4KB），它适用于存储小量数据，比如用户登录状态、用户设置等。</li></ul><p>   <strong>示例</strong>：设置和读取Cookie</p>   <pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 设置Cookie</span>document<span class="token punctuation">.</span>cookie <span class="token operator">=</span> <span class="token string">"username=John Doe; expires=Thu, 18 Aug 2023 12:00:00 UTC; path=/"</span><span class="token punctuation">;</span><span class="token comment">// 读取Cookie</span><span class="token keyword">function</span> <span class="token function">getCookie</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token string">"; "</span> <span class="token operator">+</span> document<span class="token punctuation">.</span>cookie<span class="token punctuation">;</span>  <span class="token keyword">const</span> parts <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"; "</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>parts<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> parts<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">";"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> username <span class="token operator">=</span> <span class="token function">getCookie</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Output: "John Doe"</span></code></pre><h4 id="2）-Web-Storage"><a href="#2）-Web-Storage" class="headerlink" title="2） Web Storage"></a>2） Web Storage</h4><ul><li>语法：Web Storage提供了localStorage和sessionStorage两个对象用于在浏览器中存储数据，可以使用setItem、getItem和removeItem等方法来操作数据。</li><li>使用方式：Web Storage适用于存储较大量的数据（通常5MB或更大），且只在客户端有效，不会自动发送到服务器。localStorage数据在浏览器关闭后仍然保持，而sessionStorage数据只在当前会话有效。</li><li>适用场景：Web Storage适用于存储用户设置、本地缓存数据等，因为它们在浏览器关闭后可以持久保存，不需要频繁与服务器通信。</li></ul><p>   <strong>示例</strong>：使用localStorage和sessionStorage</p>   <pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 使用localStorage</span>localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span> <span class="token string">"John Doe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> username <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Output: "John Doe"</span><span class="token comment">// 使用sessionStorage</span>sessionStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">"city"</span><span class="token punctuation">,</span> <span class="token string">"New York"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> city <span class="token operator">=</span> sessionStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">"city"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>city<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Output: "New York"</span></code></pre><h4 id="3）IndexedDB"><a href="#3）IndexedDB" class="headerlink" title="3）IndexedDB"></a>3）IndexedDB</h4><ul><li>语法：IndexedDB是一种客户端数据库，使用indexedDB.open打开或创建数据库，然后使用事务和对象存储来存储和检索数据。</li><li>使用方式：IndexedDB适用于存储结构化数据和大量数据的情况，它是一个异步API，支持高级查询操作。</li><li>适用场景：IndexedDB适用于复杂的数据结构和大量数据的存储，并提供更高级的查询能力。它常用于大型Web应用中，如离线应用程序、文件管理器等。</li></ul><p>   <strong>示例</strong>：使用IndexedDB</p>   <pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 打开或创建一个IndexedDB数据库</span><span class="token keyword">const</span> request <span class="token operator">=</span> indexedDB<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"myDatabase"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 数据库打开成功时的回调</span>request<span class="token punctuation">.</span><span class="token function-variable function">onsuccess</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> db <span class="token operator">=</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>result<span class="token punctuation">;</span>  <span class="token keyword">const</span> transaction <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">transaction</span><span class="token punctuation">(</span><span class="token string">"users"</span><span class="token punctuation">,</span> <span class="token string">"readwrite"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> store <span class="token operator">=</span> transaction<span class="token punctuation">.</span><span class="token function">objectStore</span><span class="token punctuation">(</span><span class="token string">"users"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 添加数据</span>  store<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"John Doe"</span><span class="token punctuation">,</span> <span class="token literal-property property">email</span><span class="token operator">:</span> <span class="token string">"john@example.com"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 查询数据</span>  <span class="token keyword">const</span> getUserRequest <span class="token operator">=</span> store<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  getUserRequest<span class="token punctuation">.</span><span class="token function-variable function">onsuccess</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> user <span class="token operator">=</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>result<span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Output: "John Doe"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><p>   <a href="https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API/Using_IndexedDB">indexedDB 使用文档</a></p><p>这三种客户端存储方式各有优势和用途。Cookies适用于简单的文本数据和需要在浏览器和服务器之间传递的信息。Web Storage适用于较大量的数据，但不需要持久性存储。IndexedDB适用于复杂的数据结构和大量数据的存储，并提供更高级的查询能力。根据具体的需求和数据大小，开发者可以选择合适的存储方式。</p><h3 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h3><h4 id="1）概念"><a href="#1）概念" class="headerlink" title="1）概念"></a>1）概念</h4><p>把逻辑分块，各自封装，相互独立，每个块自行决定对外暴露什么，同时自行决定引入执行哪些外部代码</p><h4 id="2）规范"><a href="#2）规范" class="headerlink" title="2）规范"></a>2）规范</h4><ul><li><p>CommonJs</p><blockquote><p>主要用于服务端的模块化<br>采用同步加载模块的方式，也就是说只有加载完成，才能执行后面的操作<br>它使用 require 引用和加载模块，exports 定义和导出模块，module 标识模块</p></blockquote></li><li><p>CMD</p><blockquote><p>CMD规范专门用于浏览器端，模块的加载是异步的，模块使用时才会加载执行。CMD规范整合了CommonJS&gt; 和AMD规范的特点</p></blockquote></li><li><p>AMD</p><blockquote><p>异步模块定义，AMD代表：RequireJS<br>RequireJS的基本思想是，通过define方法，将代码定义为模块；通过require方法，实现代码的模块加&gt; 载。</p></blockquote></li><li><p>ES6模块</p><blockquote><p>export 和 import</p></blockquote></li></ul><h4 id="3）注意"><a href="#3）注意" class="headerlink" title="3）注意"></a>3）注意</h4><blockquote><p>ES6是编译时加载，CommonJS的运行时加载<br>ES6 模块输出的是值的引用，CommonJS 模块输出的是一个值的拷贝<br>ES6 模块是动态引用，并且不会缓存值，模块里面的变量绑定其所在的模块</p></blockquote><h3 id="工作者线程（web-worker）"><a href="#工作者线程（web-worker）" class="headerlink" title="工作者线程（web worker）"></a>工作者线程（web worker）</h3><h4 id="1）背景"><a href="#1）背景" class="headerlink" title="1）背景"></a>1）背景</h4><p>主线程执行JavaScript时，如果有密集计算或长时间任务，可能导致页面卡顿或失去响应。</p><p>Web Worker是HTML5特性，允许创建额外的后台线程来执行计算密集型或耗时任务，任务转移到Web Worker线程中，让主线程保持流畅响应，以提高网页性能和用户体验。</p><h4 id="2）简介"><a href="#2）简介" class="headerlink" title="2）简介"></a>2）简介</h4><p>JavaScript在浏览器中运行在虚拟环境，每个打开的页面都有自己的独立环境，相当于一个沙盒，不会相互干扰。</p><p>使用工作者线程可以在原始页面环境之外创建独立的子环境，用于并行执行代码，但不能与依赖单线程API（如DOM）互操作。<br><img src="/images/javascript/web-worker01.png" alt="图片演示"> <img src="/images/javascript/web-worker02.png" alt="图片演示"></p><blockquote><p>在这个图示中，我们的浏览器被表示为一个大的外部框。在浏览器中，每当我们打开一个新的标签页、窗口或者访问一个网站页面时，都会在浏览器内部创建一个沙盒（sandbox）环境，如图中左边的三个小框所示。每个沙盒是相互隔离的，互不干扰，保证了页面间的安全性。</p><p>每个网站页面（Web App）都包含了HTML、CSS和JS代码，构成了这个Web App，并且在沙盒内运行。这个沙盒提供了一个运行时环境，允许Web App调用浏览器提供的API，如window、DOM等接口。虚线框表示浏览器外部的一些代理（agency），用于与浏览器后台的程序进行交互。</p><p>在这个代理里面，有一些浏览器后台程序，例如navigator对象中的Service Worker Manager。Service Worker是一种特殊的后台线程，它实际上是一个独立运行的JavaScript程序（例如sw.js或service-worker.js）。Service Worker的代码在后台运行，并可以与Web App进行通信，拦截、重定向和修改页面发出的请求，实现离线缓存和推送通知等功能。</p><p>Web App中的代码与Service Worker之间通过注册相关的Service Worker Registration（swReg）进行通信。这部分代码与Web App打包在一起，运行在前端沙盒中。而Service Worker的代码通过调用navigator的Service Worker注册接口（register()）将其注册到后台Service Worker Manager中，使其在后台运行。</p><p>这样，Web App和Service Worker之间形成了一个里应外合的机制，它们可以相互配合工作，实现一些特殊的功能和处理网络请求等操作。</p></blockquote><h4 id="3）类型"><a href="#3）类型" class="headerlink" title="3）类型"></a>3）类型</h4><ol><li>专用工作者线程（Dedicated Worker）- 只能被创建它的页面使用</li><li>共享工作者线程（Shared Worker）- 同源页面共享</li><li>服务工作者线程（Service Worker）- 要用于拦截、重定向和修改页面发出的请求</li></ol><h4 id="4）web-worker-的使用"><a href="#4）web-worker-的使用" class="headerlink" title="4）web worker 的使用"></a>4）web worker 的使用</h4><p>main.js</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 主线程</span><span class="token keyword">var</span> worker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span><span class="token string">"work.js"</span><span class="token punctuation">)</span>worker<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token parameter">e</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p>work.js</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// Worker线程</span><span class="token comment">// 做一些耗时操作</span>self<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token string">"work:"</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span></code></pre><h3 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h3><p>当谈到前端设计模式时，我们指的是在前端开发中常用的一些结构化模式，用于解决特定问题，提高代码的可维护性、可扩展性和重用性。以下是一些常见的前端设计模式，包括它们的概念、语法、使用场景和举例：</p><h4 id="1-单例模式"><a href="#1-单例模式" class="headerlink" title="1) 单例模式"></a>1) 单例模式</h4><p><strong>概念：</strong> 单例模式用于确保一个类只有一个实例，并提供全局访问点。</p><p><strong>语法：</strong> 通常使用一个变量来保存实例，如果不存在则创建。</p><p><strong>使用场景：</strong> 在需要全局唯一实例的情况下，如应用的配置信息、资源管理器等。</p><p><strong>举例：</strong></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Config</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Config<span class="token punctuation">.</span>instance<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>      Config<span class="token punctuation">.</span>instance <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> Config<span class="token punctuation">.</span>instance<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> instance1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> instance2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance1 <span class="token operator">===</span> instance2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></code></pre><h4 id="2-观察者模式"><a href="#2-观察者模式" class="headerlink" title="2) 观察者模式"></a>2) 观察者模式</h4><p><strong>概念：</strong> 观察者模式定义了对象间的一对多依赖关系，当一个对象状态发生改变时，其依赖的对象都会收到通知并更新。</p><p><strong>语法：</strong> 使用订阅和发布机制，观察者订阅被观察者的事件。</p><p><strong>使用场景：</strong> 在需要解耦事件处理和事件触发的场景，如事件驱动的 UI 更新。</p><p><strong>举例：</strong></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Subject</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>observers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">addObserver</span><span class="token punctuation">(</span><span class="token parameter">observer</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>observers<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">notify</span><span class="token punctuation">(</span><span class="token parameter">message</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>observers<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">observer</span> <span class="token operator">=></span> observer<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Observer</span> <span class="token punctuation">&#123;</span>  <span class="token function">update</span><span class="token punctuation">(</span><span class="token parameter">message</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Received message: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>message<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> subject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Subject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> observer1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Observer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> observer2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Observer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>subject<span class="token punctuation">.</span><span class="token function">addObserver</span><span class="token punctuation">(</span>observer1<span class="token punctuation">)</span><span class="token punctuation">;</span>subject<span class="token punctuation">.</span><span class="token function">addObserver</span><span class="token punctuation">(</span>observer2<span class="token punctuation">)</span><span class="token punctuation">;</span>subject<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token string">"Hello, observers!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Output to console: "Received message: Hello, observers!"</span></code></pre><h4 id="3-发布-订阅模式"><a href="#3-发布-订阅模式" class="headerlink" title="3) 发布-订阅模式"></a>3) 发布-订阅模式</h4><p><strong>概念：</strong> 发布-订阅模式类似于观察者模式，但它允许不同对象之间松散耦合，订阅者不直接与发布者交互，而是通过事件中心来传递消息。</p><p><strong>语法：</strong> 发布者发布事件，订阅者通过订阅事件来接收通知。</p><p><strong>使用场景：</strong> 在需要跨模块或组件通信的场景，以及解耦事件触发和事件处理的情况下。</p><p><strong>举例：</strong></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">EventEmitter</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>listeners <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">on</span><span class="token punctuation">(</span><span class="token parameter">event<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>listeners<span class="token punctuation">[</span>event<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>listeners<span class="token punctuation">[</span>event<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>listeners<span class="token punctuation">[</span>event<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">emit</span><span class="token punctuation">(</span><span class="token parameter">event<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>listeners<span class="token punctuation">[</span>event<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>listeners<span class="token punctuation">[</span>event<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">callback</span> <span class="token operator">=></span> <span class="token function">callback</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> eventEmitter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EventEmitter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>eventEmitter<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">,</span> <span class="token parameter">data</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Received message: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>data<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>eventEmitter<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">,</span> <span class="token string">"Hello, subscribers!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Output to console: "Received message: Hello, subscribers!"</span></code></pre><h4 id="4-模块模式"><a href="#4-模块模式" class="headerlink" title="4) 模块模式"></a>4) 模块模式</h4><p><strong>概念：</strong> 模块模式将代码组织为独立的模块，封装了私有和公共成员，避免了全局命名冲突。</p><p><strong>语法：</strong> 使用闭包来创建私有作用域，返回包含公共方法的对象。</p><p><strong>使用场景：</strong> 在需要将代码拆分为模块，保持内部数据的私有性，并提供对外暴露的接口时使用。</p><p><strong>举例：</strong></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> CounterModule <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 私有成员</span>  <span class="token keyword">function</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    count<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">function</span> <span class="token function">decrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    count<span class="token operator">--</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">function</span> <span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> count<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>    increment<span class="token punctuation">,</span>    decrement<span class="token punctuation">,</span>    getCount  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>CounterModule<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>CounterModule<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>CounterModule<span class="token punctuation">.</span><span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Output to console: 2</span></code></pre><h4 id="5-装饰者模式"><a href="#5-装饰者模式" class="headerlink" title="5) 装饰者模式"></a>5) 装饰者模式</h4><p><strong>概念：</strong> 装饰者模式允许动态地将新功能附加到对象上，扩展其功能，同时保持接口不变。</p><p><strong>语法：</strong> 使用装饰者类包裹原始对象，然后在装饰者类中添加新功能</p><p><strong>使用场景：</strong> 在需要在不修改现有代码的情况下扩展对象功能时使用，如添加日志、验证等功能。</p><p><strong>举例：</strong></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Coffee</span> <span class="token punctuation">&#123;</span>  <span class="token function">cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token number">5</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">MilkDecorator</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">coffee</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>coffee <span class="token operator">=</span> coffee<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>coffee<span class="token punctuation">.</span><span class="token function">cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> simpleCoffee <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Coffee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> coffeeWithMilk <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MilkDecorator</span><span class="token punctuation">(</span>simpleCoffee<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>simpleCoffee<span class="token punctuation">.</span><span class="token function">cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Output to console: 5</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>coffeeWithMilk<span class="token punctuation">.</span><span class="token function">cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Output to console: 7</span></code></pre><p>当然！除了前面提到的模式外，还有许多其他设计模式可以在前端开发中使用。以下是一些额外的前端设计模式，包括它们的概念、语法、使用场景和举例：</p><h4 id="6-策略模式"><a href="#6-策略模式" class="headerlink" title="6) 策略模式"></a>6) 策略模式</h4><p><strong>概念：</strong> 策略模式定义了一系列算法，将每个算法封装成一个类，使它们可以互相替换。客户端可以根据需要选择不同的算法。</p><p><strong>语法：</strong> 定义一组相同接口的策略类，然后将具体的算法封装在这些类中。</p><p><strong>使用场景：</strong> 在需要根据不同条件使用不同算法的情况下，使得算法可以独立于客户端进行更改。</p><p><strong>举例：</strong></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Strategy</span> <span class="token punctuation">&#123;</span>  <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token parameter">price</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Strategy method should be implemented."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">RegularStrategy</span> <span class="token keyword">extends</span> <span class="token class-name">Strategy</span> <span class="token punctuation">&#123;</span>  <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token parameter">price</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> price<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">DiscountStrategy</span> <span class="token keyword">extends</span> <span class="token class-name">Strategy</span> <span class="token punctuation">&#123;</span>  <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token parameter">price</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> price <span class="token operator">*</span> <span class="token number">0.8</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Context</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">strategy</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>strategy <span class="token operator">=</span> strategy<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">setStrategy</span><span class="token punctuation">(</span><span class="token parameter">strategy</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>strategy <span class="token operator">=</span> strategy<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">calculatePrice</span><span class="token punctuation">(</span><span class="token parameter">price</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>strategy<span class="token punctuation">.</span><span class="token function">calculate</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> regularContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Context</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RegularStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>regularContext<span class="token punctuation">.</span><span class="token function">calculatePrice</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Output to console: 100</span><span class="token keyword">const</span> discountContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Context</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DiscountStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>discountContext<span class="token punctuation">.</span><span class="token function">calculatePrice</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Output to console: 80</span></code></pre><h4 id="7-适配器模式"><a href="#7-适配器模式" class="headerlink" title="7) 适配器模式"></a>7) 适配器模式</h4><p><strong>概念：</strong> 适配器模式将一个类的接口转换成另一个接口，以适应不同的使用场景。适配器允许原本不兼容的类一起工作。</p><p><strong>语法：</strong> 创建一个适配器类，将一个类的接口转换成客户端所期望的接口。</p><p><strong>使用场景：</strong> 在需要将已有代码与新代码集成，或者在需要使用不同接口的类时使用。</p><p><strong>举例：</strong></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">OldApi</span> <span class="token punctuation">&#123;</span>  <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token string">"Old API response"</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">NewApi</span> <span class="token punctuation">&#123;</span>  <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token string">"New API response"</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Adapter</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">newApi</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>newApi <span class="token operator">=</span> newApi<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>newApi<span class="token punctuation">.</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> oldApi <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OldApi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> newApi <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NewApi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> adaptedApi <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Adapter</span><span class="token punctuation">(</span>newApi<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>oldApi<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Output to console: "Old API response"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>adaptedApi<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Output to console: "New API response"</span></code></pre><h4 id="8-工厂模式"><a href="#8-工厂模式" class="headerlink" title="8) 工厂模式"></a>8) 工厂模式</h4><p><strong>概念：</strong> 工厂模式通过工厂方法创建对象，将对象的创建和使用分离，使代码更具可维护性。</p><p><strong>语法：</strong> 定义一个工厂类，包含创建对象的方法。</p><p><strong>使用场景：</strong> 在需要创建复杂对象，或者需要更好地控制对象创建流程的情况下使用。</p><p><strong>举例：</strong></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Product</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">ProductFactory</span> <span class="token punctuation">&#123;</span>  <span class="token function">createProduct</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Product</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProductFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> product <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">createProduct</span><span class="token punctuation">(</span><span class="token string">"Widget"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>product<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Output to console: "Widget"</span></code></pre><h4 id="9-代理模式"><a href="#9-代理模式" class="headerlink" title="9) 代理模式"></a>9) 代理模式</h4><p><strong>概念：</strong> 代理模式用一个代理对象来控制对另一个对象的访问。代理可以用于添加额外的逻辑，如缓存、权限控制等。</p><p><strong>语法：</strong> 创建一个代理类，持有实际对象的引用，同时实现与实际对象相同的接口。</p><p><strong>使用场景：</strong> 在需要控制对对象的访问或为对象添加附加功能的情况下使用。</p><p><strong>举例：</strong></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">RealImage</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">filename</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>filename <span class="token operator">=</span> filename<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">loadFromDisk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Displaying image: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>filename<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">loadFromDisk</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Loading image: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>filename<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">ProxyImage</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">filename</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>filename <span class="token operator">=</span> filename<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>realImage <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>realImage<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>realImage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RealImage</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>realImage<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> image <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProxyImage</span><span class="token punctuation">(</span><span class="token string">"image.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>image<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Output to console: "Loading image: image.jpg" and "Displaying image: image.jpg"</span>image<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Output to console: "Displaying image: image.jpg"</span></code></pre><h3 id="规范"><a href="#规范" class="headerlink" title="规范"></a>规范</h3><h4 id="1）命名规范"><a href="#1）命名规范" class="headerlink" title="1）命名规范"></a>1）命名规范</h4><ul><li>变量名应该是名词：person</li><li>函数名应该以动词开始：getName()</li><li>返回布尔值的函数通常以 is 开头：isEnabled()</li><li>变量、函数、方法，应该小驼峰：getName()</li><li>类名首字母大写：Person</li><li>常量全大写，并以下划线相接：REQUEST_TIMEOUT</li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>草稿</title>
      <link href="/2022/11/02/BOK/"/>
      <url>/2022/11/02/BOK/</url>
      
        <content type="html"><![CDATA[<blockquote><p>持续更新中…</p></blockquote><h3 id="基础设施"><a href="#基础设施" class="headerlink" title="基础设施"></a>基础设施</h3><ol><li>前端标准：W3C | SPA | DOM | BOM | JSON | JSONP | HTTP | HTML5 | CSS3</li><li>编码规范：eslint | tslint | stylelint</li><li>基础构建优化：压缩 | 校验 | 资源合并</li><li>构建工具：webpack | gulp | rollup | vite</li><li>包管理工具：Brower | npm | yarn</li><li>模块化：AMD | CMD | CommonJS | ES6 Module</li><li>CSS 预处理器: less | sass | stylus</li><li>组件化</li><li>资源管理：按需加载 | 延迟加载 | 缓存复用 | CND 部署 | 文件指纹 | 请求合并 | 异步同步加载</li></ol><h3 id="工作链"><a href="#工作链" class="headerlink" title="工作链"></a>工作链</h3><ol><li>脚手架</li><li>搭建本地开发环境</li><li>搭建本地 mock 环境</li><li>自动化构建：webpack 配置使用 | 常用插件 | webpack 构建性能优化 | babel | 模块合并 | webpack 增量更新构建 | 资源定位 | 自动刷新</li><li>单元测试</li><li>部署发布</li><li>监控：行为监控 | 异常监控 | 性能监控</li></ol><h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><ol><li>chrome</li><li>postman</li><li>移动端抓包工具</li><li>微信开发者工具</li><li>vscode | hbuilder</li><li>devtools</li></ol><h3 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h3><ol><li>vue &amp; vue 全家桶</li><li>react &amp; react 全家桶</li><li>ruoyi | ant-design</li><li>element | vant</li><li>uniapp | taro</li></ol><h3 id="node"><a href="#node" class="headerlink" title="node"></a>node</h3><ol><li>web 服务<ol><li>express</li><li>koa</li><li>hapi</li><li>sails</li><li>tsw</li><li>meteor</li><li>feathers</li><li>…</li></ol></li><li>模板引擎<ol><li>handlebars</li><li>ejs</li><li>jade</li></ol></li><li>单元测试<ol><li>karma</li><li>mocha</li><li>jest</li></ol></li><li>包管理<ol><li>npm</li><li>cnpm</li><li>yarn</li></ol></li><li>守护进程<ol><li>pm2</li><li>forever</li></ol></li><li>三大特定：单线程 | 非阻塞 I&#x2F;O | 事件驱动</li><li>设计模式</li><li>数据库：MySql | MongoDB</li><li>缓存：redis …</li><li>消息队列</li><li>通讯协议：网络协议 | 数据序列号协议 | 接口协议</li></ol><h3 id="暂未分类"><a href="#暂未分类" class="headerlink" title="暂未分类"></a>暂未分类</h3><ol><li>JavaScript</li><li>TypeScript</li><li>微信小程序</li><li>Webpack</li><li>Rollup</li><li>Babel</li><li>Vite</li><li>Git</li><li>GitHub</li><li>Node</li><li>Tailwind</li><li>nuxt next</li><li>地图开发</li><li>数据可视化</li><li>echats | hightchart</li><li>文件相关</li><li>微前端 </li><li>低代码</li><li>npm包</li><li>工具类库搭建</li><li>跨平台</li><li>响应式</li><li>Mock</li><li>设计模式</li><li>微信公众号开发</li><li>名词</li><li>底层原理</li><li>数据结构</li><li>登录体系</li><li>three.js</li><li>插件开发</li><li>地图开发</li></ol>]]></content>
      
      
      <categories>
          
          <category> 不重要的 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 不重要的 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/10/13/hello-world/"/>
      <url>/2022/10/13/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><p>healerape.github.io</p>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 不重要的 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
